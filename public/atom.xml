<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jimmy&#39;s Blog</title>
  
  <subtitle>专注于各种技术干货的收集与分享</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jimmy9876.top/"/>
  <updated>2017-10-16T07:16:33.214Z</updated>
  <id>http://jimmy9876.top/</id>
  
  <author>
    <name>Jimmy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>阿里云vps搭建自己的hexo博客</title>
    <link href="http://jimmy9876.top/2017/06/16/%E9%98%BF%E9%87%8C%E4%BA%91vps%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84hexo%E5%8D%9A%E5%AE%A2/"/>
    <id>http://jimmy9876.top/2017/06/16/阿里云vps搭建自己的hexo博客/</id>
    <published>2017-06-16T11:44:20.000Z</published>
    <updated>2017-10-16T07:16:33.214Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Oct 16 2017 16:21:04 GMT+0800 (CST) --><blockquote><p>阿里云vps搭建自己的hexo博客</p></blockquote><a id="more"></a><h2 id="1-博客的架构"><a class="markdownIt-Anchor" href="#1-博客的架构"></a> 1. 博客的架构</h2><p>先搞明白Hexo博客从搭建到自动发布的架构，才能更好的理解我们每一步进行的操作。不然只跟着步骤过了一遍，却不知道为什么这么做。</p><p>首先看这张架构图：<br><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fgnaetp3qfj30m80dct9o.jpg" alt=""></p><p>整个流程就是本地将 <code>*.md</code> 渲染成静态文件，然后Git推送到服务器的<code>repository</code>,服务器再通过 <code>git-hooks</code> 同步网站根目录。</p><h2 id="2-整个搭建流程"><a class="markdownIt-Anchor" href="#2-整个搭建流程"></a> 2. 整个搭建流程</h2><p><strong>第一部分</strong>: 服务器环境搭建，包括安装 <code>Git</code> 、<code>Nginx</code>配置 、创建 <code>git</code> 用户 。</p><p><strong>第二部分</strong>: 本地<code>Hexo</code>初始化， 包括安装 <code>NodeJS</code> 、<code>hexo-cli</code>, 生成本地静态网站</p><p><strong>第三部分</strong>: 使用Git自动化部署发布博客</p><h2 id="3-服务器环境搭建"><a class="markdownIt-Anchor" href="#3-服务器环境搭建"></a> 3. 服务器环境搭建</h2><h4 id="3-1安装git和nodejs-centos-环境"><a class="markdownIt-Anchor" href="#3-1安装git和nodejs-centos-环境"></a> 3-1.安装Git和NodeJS (CentOS 环境)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">yum install git</div><div class="line">#安装NodeJS</div><div class="line">curl --silent --location https://rpm.nodesource.com/setup_5.x | bash -</div></pre></td></tr></table></figure><p>NodeJS 安装可以参考： <a href="https://nodejs.org/en/download/package-manager" target="_blank" rel="external">Linux安装NodeJS</a></p><h4 id="3-2-创建git用户"><a class="markdownIt-Anchor" href="#3-2-创建git用户"></a> 3-2. 创建git用户</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">adduser git</div><div class="line">chmod 740 /etc/sudoers</div><div class="line">vim /etc/sudoers</div></pre></td></tr></table></figure><p>找到以下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">## Allow root to run any commands anywhere</div><div class="line">root    ALL=(ALL)     ALL</div></pre></td></tr></table></figure><p>在下面添加一行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git  ALL=(ALL)  ALL</div></pre></td></tr></table></figure><p>保存退出后改回权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod 400 /etc/sudoers</div></pre></td></tr></table></figure><p>随后设置Git用户的密码，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#需要root权限</div><div class="line">sudo passwd git</div></pre></td></tr></table></figure><p>切换至git用户，创建 <code>~/.ssh</code> 文件夹和 <code>~/.ssh/authorized_keys</code>文件，并赋予相应的权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">su git</div><div class="line">mkdir ~/.ssh</div><div class="line">vim ~/.ssh/authorized_keys</div><div class="line">#然后将电脑中执行 cat ~/.ssh/id_rsa.pub | pbcopy ,将公钥复制粘贴到authorized_keys</div><div class="line">chmod 600 ~/.ssh/authorzied_keys</div><div class="line">chmod 700 ~/.ssh</div></pre></td></tr></table></figure><p>然后就可以执行ssh 命令测试是否可以免密登录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh -v git@SERVER</div></pre></td></tr></table></figure><p>至此，Git用户添加完成</p><h4 id="3-3-nginx安装和配置"><a class="markdownIt-Anchor" href="#3-3-nginx安装和配置"></a> 3-3. Nginx安装和配置</h4><p>我是用的是lnmp 一键安装包，nginx安装教程一大堆，就不再叙述。主要看nginx配置。找到nginx的配置文件，修改配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">server</div><div class="line">&#123;</div><div class="line">    listen 80;</div><div class="line">    #listen [::]:80;</div><div class="line">    server_name www.seekbetter.me seekbetter.me;</div><div class="line">    index index.html index.htm index.php default.html default.htm default.php;</div><div class="line">    #这里要改成网站的根目录</div><div class="line">    root  /path/to/www;  </div><div class="line"></div><div class="line">    include other.conf;</div><div class="line">    #error_page   404   /404.html;</div><div class="line">    location ~ .*\.(ico|gif|jpg|jpeg|png|bmp|swf)$</div><div class="line">    &#123;</div><div class="line">        access_log   off;</div><div class="line">        expires      1d;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    location ~ .*\.(js|css|txt|xml)?$</div><div class="line">    &#123;</div><div class="line">        access_log   off;</div><div class="line">        expires      12h;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    location / &#123;</div><div class="line">        try_files $uri $uri/ =404;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    access_log  /home/wwwlogs/blog.log  access;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="4-本地hexo程序"><a class="markdownIt-Anchor" href="#4-本地hexo程序"></a> 4. 本地Hexo程序</h2><h4 id="4-1初始化hexo博客"><a class="markdownIt-Anchor" href="#4-1初始化hexo博客"></a> 4-1：初始化Hexo博客</h4><p>首先要安装 <code>hexo-cli</code>，安装<code>hexo-cli</code> 需要 root 权限，使用 <code>sudo</code> 运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo npm install -g hexo-cli</div></pre></td></tr></table></figure><p>然后初始化Hexo程序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd ~/Documents/code</div><div class="line">hexo init blog</div></pre></td></tr></table></figure><p>等执行成功以后安装两个插件， <code>hexo-deployer-git</code> 和 <code>hexo-server</code> ,这俩插件的作用分别是使用Git自动部署，和本地简单的服务器。</p><p><a href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="external">hexo-deployer-git帮助文档</a><br><a href="https://hexo.io/zh-cn/docs/server.html" target="_blank" rel="external">hexo-server帮助文档</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd blog</div><div class="line">npm install hexo-deployer-git --save</div><div class="line">npm install hero-server</div></pre></td></tr></table></figure><h4 id="4-2-生成自己的第一篇文章-hello-world"><a class="markdownIt-Anchor" href="#4-2-生成自己的第一篇文章-hello-world"></a> 4-2. 生成自己的第一篇文章 hello world !</h4><p>使用 <code>hexo new &lt;文章名称&gt;</code> 来新建文章，该命令会成成一个 <code>.md</code>文件放置在 <code>sources/_posts</code>文件夹。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo new &quot;hello Hexo&quot;</div><div class="line">vim sources/_posts/hello-hexo.md</div></pre></td></tr></table></figure><p>编辑完毕以后， 使用<code>hexo g</code>将 <code>.md</code>文件渲染成静态文件，然后启动<code>hexo-server</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo g</div><div class="line">hexo server</div></pre></td></tr></table></figure><p>现在便可以打开浏览器访问 <code>http://localhost:4000</code> 来查看我们的博客了！</p><h2 id="5-自动化部署"><a class="markdownIt-Anchor" href="#5-自动化部署"></a> 5. 自动化部署</h2><h4 id="5-1服务器上建立git裸库"><a class="markdownIt-Anchor" href="#5-1服务器上建立git裸库"></a> 5-1：服务器上建立git裸库</h4><p>创建一个裸仓库，裸仓库就是只保存<code>git</code>信息的<code>Repository</code>, 首先切换到<code>git</code>用户确保<code>git</code>用户拥有仓库所有权<br>一定要加 <code>--bare</code>，这样才是一个裸库。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">su git</div><div class="line">cd ~</div><div class="line">git init --bare blog.git</div></pre></td></tr></table></figure><h4 id="5-2-使用-git-hooks-同步网站根目录"><a class="markdownIt-Anchor" href="#5-2-使用-git-hooks-同步网站根目录"></a> 5-2. 使用 git-hooks 同步网站根目录</h4><p>在这里我们使用的是 <code>post-receive</code>这个钩子，当git有收发的时候就会调用这个钩子。 在 <code>~/blog.git</code> 裸库的 <code>hooks</code>文件夹中，<br>新建<code>post-receive</code>文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">vim ~/blog.git/hooks/post-receive</div><div class="line"></div><div class="line">#!/bin/sh</div><div class="line">git --work-tree=/path/to/www --git-dir=~/blog.git checkout -f</div></pre></td></tr></table></figure><p>保存后，要赋予这个文件可执行权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod +x post-receive</div></pre></td></tr></table></figure><h4 id="5-3-配置_configyml完成自动化部署"><a class="markdownIt-Anchor" href="#5-3-配置_configyml完成自动化部署"></a> 5-3. 配置<code>_config.yml</code>,完成自动化部署</h4><p>然后打开 <code>_config.yml</code>, 找到 <code>deploy</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">    type: git</div><div class="line">    repo: git@SERVER:/home/git/blog.git    //&lt;repository url&gt;</div><div class="line">    branch: master            //这里填写分支   [branch]</div><div class="line">    message: 提交的信息         //自定义提交信息 (默认为 Site updated: &#123;&#123; now(&apos;YYYY-MM-DD HH:mm:ss&apos;) &#125;&#125;)</div></pre></td></tr></table></figure><p>保存后，尝试将我们刚才写的&quot;hello hexo&quot;部署到服务器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo clean</div><div class="line">hexo generate --deploy</div></pre></td></tr></table></figure><p>访问服务器地址，就可以看到我们写的文章&quot;Hello hexo&quot;,以后写文章只需要：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo new &quot;Blog article name&quot;</div><div class="line">···写文章</div><div class="line">hexo clean &amp;&amp; hexo generate --deploy</div></pre></td></tr></table></figure><p>博客就更新咯！~</p><h4 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料：</h4><p><a href="http://www.swiftyper.com/2016/04/17/deploy-hexo-with-git-hook/" target="_blank" rel="external">使用 Git Hook 自动部署 Hexo 到个人 VPS</a><br><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">Hexo 文档</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Oct 16 2017 16:21:04 GMT+0800 (CST) --&gt;&lt;blockquote&gt;&lt;p&gt;阿里云vps搭建自己的hexo博客&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="http://jimmy9876.top/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>让你的hexo博客支持LaTex数学公式</title>
    <link href="http://jimmy9876.top/2017/06/11/%E8%AE%A9%E4%BD%A0%E7%9A%84hexo%E5%8D%9A%E5%AE%A2%E6%94%AF%E6%8C%81LaTex%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/"/>
    <id>http://jimmy9876.top/2017/06/11/让你的hexo博客支持LaTex数学公式/</id>
    <published>2017-06-11T08:21:20.000Z</published>
    <updated>2017-10-16T08:02:07.580Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Oct 16 2017 16:21:04 GMT+0800 (CST) --><h2 id="利用mathjax来渲染latex数学公式"><a class="markdownIt-Anchor" href="#利用mathjax来渲染latex数学公式"></a> 利用MathJax来渲染LaTeX数学公式</h2><a id="more"></a><p>经过一番google之后，发现有位高手已经写好了一个自动部署MathJax的hexo插件<br><a href="http://catx.me/2014/03/09/hexo-mathjax-plugin/" target="_blank" rel="external">http://catx.me/2014/03/09/hexo-mathjax-plugin/</a><br>安装方式也很简单，在你的博客文件夹下执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install hexo-math --save</div><div class="line">hexo math install</div></pre></td></tr></table></figure><p><strong>这里npm如果缓慢，请自行换成淘宝镜像源</strong></p><p><strong>关于淘宝镜像源，在之前文章中有提到，请自行查阅</strong></p><p>然后在新建的博文中写上一个查看LaTeX效果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">\begin&#123;align&#125;</div><div class="line">\theta\_0 &amp; := \theta\_0 - \alpha\frac&#123;\partial&#125;&#123;\partial\theta\_0&#125;J(\theta\_0,\theta\_1) \\\\</div><div class="line">&amp; = \theta\_0 - \alpha\frac&#123;\partial&#125;&#123;\partial\theta\_0&#125; \frac&#123;1&#125;&#123;2m&#125; \sum\_&#123;i=1&#125;^&#123;m&#125;(h\_\theta(x^&#123;(i)&#125;) - y^&#123;(i)&#125;)^2 \\\\</div><div class="line">&amp; = \theta\_0 - (\alpha \frac&#123;1&#125;&#123;2m&#125; \* 2 \* \sum\_&#123;i=1&#125;^&#123;m&#125;(h\_\theta(x^&#123;(i)&#125;) - y^&#123;(i)&#125;)) \* \frac&#123;\partial&#125;&#123;\partial\theta\_0&#125;(h\_\theta(x^&#123;(i)&#125;) - y^&#123;(i)&#125;) \\\\</div><div class="line">&amp; = \theta\_0 - \frac&#123;\alpha&#125;&#123;m&#125;  * \sum\_&#123;i=1&#125;^&#123;m&#125;(h\_\theta(x^&#123;(i)&#125;) - y^&#123;(i)&#125;)</div><div class="line">\end&#123;align&#125;</div></pre></td></tr></table></figure><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>R</mi><mrow><mi>m</mi><mo>×</mo><mi>n</mi></mrow></msub><mo>=</mo><msub><mi>U</mi><mrow><mi>m</mi><mo>×</mo><mi>m</mi></mrow></msub><msub><mi>S</mi><mrow><mi>m</mi><mo>×</mo><mi>n</mi></mrow></msub><msubsup><mi>V</mi><mrow><mi>n</mi><mo>×</mo><mi>n</mi></mrow><mrow><mi mathvariant="normal">′</mi></mrow></msubsup></mrow><annotation encoding="application/x-tex">R_{m \times n} = U_{m \times m} S_{m \times n} V_{n \times n}&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:.801892em"></span><span class="strut bottom" style="height:1.107223em;vertical-align:-.305331em"></span><span class="base displaystyle textstyle uncramped"><span class="mord"><span class="mord mathit" style="margin-right:.00773em">R</span><span class="vlist"><span style="top:.15em;margin-right:.05em;margin-left:-.00773em"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">m</span><span class="mbin">×</span><span class="mord mathit">n</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span>​</span></span></span><span class="mrel">=</span><span class="mord"><span class="mord mathit" style="margin-right:.10903em">U</span><span class="vlist"><span style="top:.15em;margin-right:.05em;margin-left:-.10903em"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">m</span><span class="mbin">×</span><span class="mord mathit">m</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span>​</span></span></span><span class="mord"><span class="mord mathit" style="margin-right:.05764em">S</span><span class="vlist"><span style="top:.15em;margin-right:.05em;margin-left:-.05764em"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">m</span><span class="mbin">×</span><span class="mord mathit">n</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span>​</span></span></span><span class="mord"><span class="mord mathit" style="margin-right:.22222em">V</span><span class="vlist"><span style="top:.24700000000000003em;margin-left:-.22222em;margin-right:.05em"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">n</span><span class="mbin">×</span><span class="mord mathit">n</span></span></span></span><span style="top:-.41300000000000003em;margin-right:.05em"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathrm">′</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span>​</span></span></span></span></span></span></span></p><p>嗯，发现一切显示完美…</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Oct 16 2017 16:21:04 GMT+0800 (CST) --&gt;&lt;h2 id=&quot;利用mathjax来渲染latex数学公式&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#利用mathjax来渲染latex数学公式&quot;&gt;&lt;/a&gt; 利用MathJax来渲染LaTeX数学公式&lt;/h2&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="http://jimmy9876.top/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>软件测试习题（更新ing）</title>
    <link href="http://jimmy9876.top/2017/06/11/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E4%B9%A0%E9%A2%98%EF%BC%88%E6%9B%B4%E6%96%B0ing%EF%BC%89/"/>
    <id>http://jimmy9876.top/2017/06/11/软件测试习题（更新ing）/</id>
    <published>2017-06-11T06:21:57.000Z</published>
    <updated>2017-10-16T07:16:33.214Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Oct 16 2017 16:21:04 GMT+0800 (CST) --><h1 id="软件测试复习"><a class="markdownIt-Anchor" href="#软件测试复习"></a> 软件测试复习</h1><blockquote><p>软件测试复习题</p></blockquote><a id="more"></a><h1 id="软件测试复习-2"><a class="markdownIt-Anchor" href="#软件测试复习-2"></a> 软件测试复习</h1><h2 id="判断题"><a class="markdownIt-Anchor" href="#判断题"></a> 判断题</h2><p>1a、软件测试的目的仅仅是尽可能多的找出软件中的缺陷（ ）</p><p>1b、没有检测出错误的测试用例是低质量的测试用例（ ）</p><p>2、自适应随机测试的错误检测效率高于随机测试（ ）</p><p>3a、回归测试是由最终用户来实施的（ ）</p><p>3b、回归测试中，必须运行前次测试中的所有测试用例（ ）</p><p>4、需求规格说明书确定后，软件实现的额外功能越多越好（ ）</p><p>5a、大多数软件缺陷是在程序编码阶段导致的（ ）</p><p>5b、编码开始前的活动不会导致软件缺陷（ ）</p><p>5c、大多数软件缺陷是在需求分析阶段导致的（ ）</p><p>6a、白盒测试中，满足判定覆盖标准的测试用例集，其错误检测能力强于满足条件覆盖标准的测试用例集（ ）</p><p>6b、白盒测试中，满足判定覆盖标准的测试用例集，其对逻辑表达式的覆盖能力强于满足条件覆盖标准的测试用例集（ ）</p><p>7a、自底向上集成需要测试员编写驱动模块（ ）</p><p>7b、自底向上集成需要测试员编写桩模块（ ）</p><p>7c、自顶向下集成需要测试员编写驱动模块（ ）</p><p>7d、自顶向下集成需要测试员编写桩模块（ ）</p><p>8、负载测试是验证要检验的系统的能力最高能达到什么程度（ ）</p><p>9、测试人员要坚持原则，缺陷未修复完坚决不予通过（ ）</p><p>10、发现错误多的模块，残留在模块中的错误也多（ ）</p><p>11a、编码完成之前测试人员不需要提交任何工作（ ）</p><p>11b、编码完成之前测试人员不需要开展任何工作（ ）</p><p>12a、软件测试只能发现错误，但不能保证测试后的软件没有错误（ ）</p><p>12b、测试计划中指定的所有测试用例运行均通过，说明软件没有错误（ ）</p><p>12c、软件项目进入需求分析阶段，测试人员就应该开始介入其中（ ）</p><p>13、在设计测试用例时，应包括合理的输入和不合理的输入（ ）</p><p>14、在进行软件测试时，只要故障代码在执行某条测试用例时被覆盖，则该测试用例的运行结果就一定是失败（ ）</p><p>15a、白盒测试中，可以通过大量设计测试用例的方式，使得这些测试用例的语句覆盖率达到100%（ ）</p><p>15b、白盒测试中，满足条件组合覆盖的测试用例集，一定能保证判定语句取真取假的情况出现至少各一次（ ）</p><p>16、决策表中条件的数量为n，则最终决策表中规则的数量一定是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">2^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:.664392em"></span><span class="strut bottom" style="height:.664392em;vertical-align:0"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathrm">2</span><span class="vlist"><span style="top:-.363em;margin-right:.05em"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord mathit">n</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span>​</span></span></span></span></span></span>（ ）</p><p>17、自适应随机测试的错误检测效率高于随机测试（ ）</p><h2 id="选择题"><a class="markdownIt-Anchor" href="#选择题"></a> 选择题</h2><p>1a、系统测试通常使用_______技术，主要测试被测应用的高级互操作性需求，而无需考虑被测试应用的内部结构。</p><p>1b、单元测试的主要测试技术不包括（ ）<br>A、白盒测试 B、压力测试<br>C、静态测试 D、结构化测试</p><p>2、软件生命周期中所花费用最多的阶段是______</p><p>3、软件确认测试合格通过的准则是___________________</p><p>4a、根据用户在软件使用过程中提出的建设性意见而进行的维护活动称为_______</p><p>5、下列关于Alpha测试时的描述中正确的是__<br>A、Alpha测试是集成测试的一种 B、Alpha测试不需要用户代表参加<br>C、Alpha测试不需要测试人员参加 D、Alpha测试需要用户代表参加</p><p>6a、关于软件测试目的的描述，以下哪些是正确的（ ）<br>A、评价软件的质量 B、更正软件的错误<br>C、找出软件中的所有错误 D、证明软件是正确的</p><p>6b、关于软件测试目的的描述，以下哪些是错误的（ ）<br>A、评价软件的质量 B、更正软件的错误<br>C、找出软件中的所有错误 D、证明软件是正确的</p><p>7a、下列方法中，不属于黑盒测试的是（ ）<br>A、基本路径测试法 B、等价类测试法<br>C、边界值分析法 D、基于场景的测试方法</p><p>7b、以下不属于白盒测试的技术的是（ ）<br>A、逻辑覆盖 B、基本路径测试<br>C、循环覆盖测试 D、等价类划分</p><p>8a、使用白盒测试方法时，确定测试数据应根据（ ）和指定的覆盖标准。<br>A、使用说明书 B、程序的代码及结构<br>C、需求说明书 D、程序的功能</p><p>8b、使用黑盒测试方法时，确定测试数据应根据（ ）和指定的覆盖标准。<br>A、程序的内部逻辑 B、程序的复杂结构<br>C、程序的源代码 D、程序的功能</p><p>9、测试结束的标准可能包括（ ）<br>A、运行完指定的所有测试用例 B、覆盖率达到给定的标准<br>C、检测到所有的错误 D、时间及其他资源耗尽</p><p>10a、如果一个判定中的谓词为（A&gt;1）or（B&lt;=3），则为了达到100%的条件覆盖率，至少需要设计__个测试用例</p><p>10b、如果一个判定中的谓词为（A&gt;1）or（B&lt;=3），则为了达到100%的判定条件覆盖率，至少需要设计__个测试用例</p><p>10c、如果一个判定中的谓词为（A&gt;1）or（B&lt;=3），则为了达到100%的条件组合覆盖率，至少需要设计__个测试用例</p><h2 id="简答题"><a class="markdownIt-Anchor" href="#简答题"></a> 简答题</h2><p>一、在列出等价类表后确定测试用例的具体步骤<br>（1）首先为等价类表中的每一个等价类分别规定一个唯一的编号<br>（2）设计一个新的测试用例，使它能够尽量覆盖尚未覆盖的有效等价类，重复这个步骤，直到所有的有效等价类均被测试用例所覆盖<br>（3）设计一个新的测试用例，使它仅覆盖一个尚未覆盖的无效等价类，重复这一步骤，直到所有的无效等价类均被测试用例所覆盖</p><p>二、为什么使用自适应随机测试<br>自适应随机测试(Adaptive Random Testing,ART)是一种增强的随机测试,比随机测试更有效。自适应随机测试（Adaptive Random Testing）是一种更加平滑的测试用例生成技术。在给定的测试用例集中，随机选取第一个测试用例，并从集合中删除。</p><p>三、自适应随机测试（Adaptive Random Testing）相对于随机测试（Random Testing）具有什么优势？<br>自适应随机测试的检查错误的效率高于随机测试。自适应随机测试吸取随机测试的优点，并在选取测试用例时按照一定的规则，保证测试用例均匀分布在整个解空间中，提升其检测出错误的能力。</p><p>四、为什么使用边界值分析法？<br>无数的测试实践表明，大量的故障往往发生在输入定义域或输出值域的边界上，而不是在其内部，因此，针对各种边界情况设计测试用例，通常会取得很好的测试效果。</p><p>五、怎样用边界值分析法设计测试用例？<br>（1）首先确定边界情况，通常输入或输出等价类的边界就是应该着重测试的边界情况<br>（2）选取正好等于、刚刚大于或刚刚小于边界的值作为测试数据，而不是选取等价类中的典型值或任意值</p><p>六、白盒测试中什么是判定／条件覆盖？它与判定覆盖和条件覆盖的关系？<br>设计足够多的测试用例，使得程序中每个判定包含的每个条件的所有情况（真／假）至少出现一次，并且每个判定本身的判定结果（真／假）也至少出现一次<br>——满足判定／条件覆盖的测试用例一定同时满足判定覆盖和条件覆盖</p><p>七、采用因果图法设计测试用例的步骤<br>（1）根据程序规格说明书描述，分析并确定因（输入条件）和果（输出结果或程序状态的改变），画出因果图<br>（2）将得到的因果图转换为判定表<br>（3）为判定表中每一列所表示的情况设计一个测试用例</p><p>八、使用因果图法的优点<br>（1）考虑到了输入情况的各种组合以及各个输入情况之间的相互制约关系<br>（2）能够帮助测试人员按照一定的步骤，高效率的开发测试用例<br>（3）因果图法是将自然语言规格说明转化成形式语言规格说明的一种严格的方法，可以指出规格说明存在的不完整性和二义性</p><p>九、构造决策表的五个步骤<br>（1）确定规则的个数（有n个条件的决策表有2n个规则（每个条件取真、假值））<br>（2）列出所有的条件桩和动作桩<br>（3）填入条件项<br>（4）填入动作项，得到初始决策表<br>（5）简化决策表，合并相似规则</p><p>十、 适用于使用决策表设计测试用例的条件：<br>规格说明以决策表形式给出，或较容易转换为决策表<br>条件的排列顺序不会也不应影响执行的操作<br>规则的排列顺序不会也不应影响执行的操作<br>当某一规则的条件已经满足，并确定要执行的操作后，不必检验别的规则<br>如果某一规则的条件要执行多个操作，这些操作的执行顺序无关紧要</p><p>十一、简述负载测试、压力测试、性能测试的联系与区别<br>性能测试是通过自动化的测试工具模拟多种正常、峰值以及异常负载条件来对系统的各项性能指标进行测试。负载测试和压力测试都属于性能测试，两者可以结合进行。通过负载测试，确定在各种工作负载下系统的性能，目标是测试当负载逐渐增加时系统各指标的变化情况。压力测试是通过确定一个系统的瓶颈或者不能接受的性能点，来获得系统能提供的最大服务级别的测试。</p><p>十二、软件测试的自动化包含哪些内容？为什么要使用自动化测试？<br>标识、设计、建立、执行、比较<br>可以执行一些手工测试困难或者难以完成的测试，例如并发测试；更好的利用资源，可以利用整晚或周末空闲机器时间进行测试；通过较少的可以获得更彻底的测试，以及提高产品的质量</p><p>十三、假设程序中存在一行错误的代码，根据PIE模型，测试用例运行‘失败’需要满足哪些条件，请给出一个简单的例子，测试用例覆盖错误代码，但测试用例运行结果‘通过’。<br>（1）执行／可达性：必须包含程序中包含故障的位置<br>（2）感染：程序的状态必须是不正确的<br>（3）传播：受感染的状态必须传播导致一些输出的程序是不正确的<br>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">CSta</span><span class="params">(<span class="keyword">int</span> []numbers)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> length = numbers.length;</div><div class="line">    <span class="keyword">double</span> mean, sum;</div><div class="line">    sum = <span class="number">0.0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i&lt;length; i++)<span class="comment">//i=0</span></div><div class="line">    &#123;</div><div class="line">        sum += numbers[i];</div><div class="line">    &#125;</div><div class="line">    mean = sum / (<span class="keyword">double</span>) length;</div><div class="line">    System.out.println(<span class="string">"mean: "</span> + mean);</div><div class="line">&#125;</div><div class="line">Test Input:[<span class="number">0</span>,<span class="number">4</span>,<span class="number">5</span>] sum=<span class="number">0</span>+<span class="number">4</span>+<span class="number">5</span> sum=<span class="number">4</span>+<span class="number">5</span> mean=<span class="number">3</span> mean=<span class="number">3</span></div></pre></td></tr></table></figure><p>十四、假设存在两个串行循环，且两者的循环无约束关系，如何进行测试？逻辑覆盖测试（循环测试）<br>（1）如果串行循环的循环体是彼此之间独立的话，可以使用简单循环的测试方法<br>循环变量的初值是否正确<br>循环变量的最大值是否正确<br>何时退出循环，循环变量的增量是否正确<br>（2）两个循环串接起来，则考虑使用嵌套循环：<br>当外循环变量为最小值，内层循环也为最小值时，运算结果<br>当外循环变量为最小值，内层循环也为最大值时，运算结果<br>当外循环变量为最大值，内层循环也为最小值时，运算结果<br>当外循环变量为最大值，内层循环也为最大值时，运算结果<br>循环变量的增量是否正确<br>何时退出内循环<br>何时退出外循环</p><p>十五、为什么需要进行组合测试？<br>输入输出测试、配置测试、兼容性测试等因素间的存在复杂关系，不容易简单测试，而组合测试能够在保证错误检出率的前提下采用较少的测试用例测试系统。</p><p>十六、用等价类划分法设计下面的测试用例<br>输入三个整数a、b、c，分别作为三角形的三条边，现通过程序判断由三条边构成的三角形的类型为等边三角形，等腰三角形，一般三角形（特殊的还有直角三角形），以及构不成三角形<br>现在要求输入三个整数a，b，c，必须满足以下条件<br>条件1： 1≤a≤100 条件4： a&lt;b+c<br>条件2： 1≤b≤100 条件5： b&lt;a+c<br>条件3： 1≤c≤100 条件6： c&lt;a+b<br>如果输入值a、b、c不满足条件1、条件2和条件3，程序会给出“非法输入”的信息，如果输入值a、b、c满足条件1、条件2和条件3，则输入下列四种情况之一：<br>（1）如果不满足条件4、条件5和条件6中的一个，则程序输出为“非三角形”。<br>（2）如果三条边相等，则程序输出为”等边三角形“。<br>（3）如果恰好有两条边相等，则程序输出为”等腰三角形“。<br>（4）如果三条边都不相等，则程序输出为“一般三角形”。<br>要求：<br>（1）分析程序的规格说明，列出等价类表（有效等价类、无效等价类）；<br>（2）设计若干条测试用用例以覆盖所有等价类。<br><img src="https://ws1.sinaimg.cn/large/006tNbRwgy1fgjsrgh2pqj30hx0rwaj9.jpg" alt=""></p><p>十七、c语言中的字符串拷贝函数声明如下：<br><code>extern char *strcpy(char *dest, const char *src)</code><br>头文件： <code>#include &lt;string.h&gt;</code><br>功能： 把从src地址开始且含有NULL结束符的字符串复制到以dest开始的地址空间<br>说明： 指针src和dest所指内存不重叠，dest有足够的空间，返回指向dest的指针<br>请：（1）尝试给出函数的实现；（2）针对该函数的功能编写测试用例；（3）将这些测试用例用gTest（或CppUnit、或JUnit）测试代码的形式给出。</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">char* strcpy(char* Dest, const char* Src)      &#123;       assert((Dest != NULL)&amp;&amp;(Src != NULL));        if(Dest == Src)return Dest;         char* tempStr = Dest;       while((*(Dest++) = *(Src++)) != '/0')             NULL;                                              return tempStr;                          &#125;void main()&#123;   clrscr();Char* strDest,*strSrc,*str;strDest="ABCD";strSrc="EFG";str = strcpy(strDest, strSrc);Printf("%s",str);&#125;输出：EFG</div></pre></td></tr></table></figure><p>未完待续、、、</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Oct 16 2017 16:21:04 GMT+0800 (CST) --&gt;&lt;h1 id=&quot;软件测试复习&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#软件测试复习&quot;&gt;&lt;/a&gt; 软件测试复习&lt;/h1&gt;&lt;blockquote&gt;&lt;p&gt;软件测试复习题&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="软件测试" scheme="http://jimmy9876.top/tags/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Emmet:WEB前端代码快速编写神器</title>
    <link href="http://jimmy9876.top/2017/06/07/Emmet-WEB%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%A0%81%E5%BF%AB%E9%80%9F%E7%BC%96%E5%86%99%E7%A5%9E%E5%99%A8/"/>
    <id>http://jimmy9876.top/2017/06/07/Emmet-WEB前端代码快速编写神器/</id>
    <published>2017-06-07T05:30:09.000Z</published>
    <updated>2017-10-16T07:16:33.209Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Oct 16 2017 16:21:03 GMT+0800 (CST) --><p>Emmet的前身是大名鼎鼎的Zen coding，如果你从事Web<a href="http://lib.csdn.net/base/javascript" target="_blank" rel="external">前端开发</a>的话，对该插件一定不会陌生。它使用仿CSS选择器的语法来生成代码，大大提高了HTML/CSS代码编写的速度，当然Sublime Text也支持改插件，<strong>默认在Sublime Text3种自带了这个插件</strong>。</p><a id="more"></a><p>下载Sublime Text3：<a href="http://download.csdn.net/detail/u011127019/9596257" target="_blank" rel="external">http://download.csdn.net/detail/u011127019/9596257</a></p><h1 id="一-快速格式化html代码输入内容然后按tab键注意在输入内容的结尾处"><a class="markdownIt-Anchor" href="#一-快速格式化html代码输入内容然后按tab键注意在输入内容的结尾处"></a> 一、快速格式化Html代码，输入内容然后按Tab键（注意在输入内容的结尾处）</h1><h2 id="1初始化比如输入或html5然后按tab键"><a class="markdownIt-Anchor" href="#1初始化比如输入或html5然后按tab键"></a> 1.初始化，比如输入“!”或“html:5”，然后按Tab键</h2><p><img src="http://img.blog.csdn.net/20160820203739582?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p><p>输入标签，然后Tab键</p><p><code>div</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div&gt;&lt;/div&gt;</div></pre></td></tr></table></figure><h2 id="2轻松添加类-id-文本和属性"><a class="markdownIt-Anchor" href="#2轻松添加类-id-文本和属性"></a> 2.轻松添加类、id、文本和属性</h2><p>比如输入：<code>div#person.top</code></p><p>自动生成：</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div id="person" class="top"&gt;&lt;/div&gt;</div></pre></td></tr></table></figure><p>比如输入：<code>h1{标题}</code></p><p>自动生成：</p><p><code>&lt;h1&gt;标题&lt;/h1&gt;</code></p><p>比如输入：<code>a[href=#]</code></p><p><code>&lt;a href=&quot;#&quot;&gt;&lt;/a&gt;</code></p><h2 id="3嵌套"><a class="markdownIt-Anchor" href="#3嵌套"></a> 3.嵌套</h2><p>现在你只需要1行代码就可以实现标签的嵌套。</p><ul><li>&gt;：子元素符号，表示嵌套的元素</li><li>+：同级标签符号</li><li>^：可以使该符号前的标签提升一行</li></ul><p>效果如下图所示：</p><p><img src="http://img.blog.csdn.net/20160820205826673?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p><h2 id="4分组"><a class="markdownIt-Anchor" href="#4分组"></a> 4.分组</h2><p>你可以通过嵌套和括号来快速生成一些代码块，比如输入<code>(.foo&gt;h1)+(.bar&gt;h2)</code>，会自动生成如下代码：</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;div class="foo"&gt;  </div><div class="line"></div><div class="line">  &lt;h1&gt;&lt;/h1&gt;  </div><div class="line"></div><div class="line">&lt;/div&gt;  </div><div class="line"></div><div class="line">&lt;div class="bar"&gt;  </div><div class="line"></div><div class="line">  &lt;h2&gt;&lt;/h2&gt;  </div><div class="line"></div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure><h2 id="5隐式标签"><a class="markdownIt-Anchor" href="#5隐式标签"></a> 5.隐式标签</h2><p>声明一个带类的标签，只需输入div.item，就会生成<code>&lt;div class=&quot;item&quot;&gt;&lt;/div&gt;</code>。<br>在过去版本中，可以省略掉div，即输入.item即可生成<code>&lt;div class=&quot;item&quot;&gt;&lt;/div&gt;</code>。现在如果只输入.item，则Emmet会根据父标签进行判定。比如在<code>&lt;ul&gt;</code>中输入.item，就会生成<code>&lt;li class=&quot;item&quot;&gt;&lt;/li&gt;</code>。<br>下面是所有的隐式标签名称：</p><ul><li><p>li：用于ul和ol中</p></li><li><p>tr：用于table、tbody、thead和tfoot中</p></li><li><p>td：用于tr中</p></li><li><p>option：用于select和optgroup中</p></li></ul><h2 id="6定义多个元素"><a class="markdownIt-Anchor" href="#6定义多个元素"></a> 6.定义多个元素</h2><p>要定义多个元素，可以使用<em>符号。比如，ul&gt;li</em>3可以生成如下代码：</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="selector-tag">ul</span>&gt;  </div><div class="line"></div><div class="line">  &lt;li&gt;&lt;/li&gt;  </div><div class="line"></div><div class="line">  &lt;li&gt;&lt;/li&gt;  </div><div class="line"></div><div class="line">  &lt;li&gt;&lt;/li&gt;  </div><div class="line"></div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure><h2 id="7定义多个带属性的元素"><a class="markdownIt-Anchor" href="#7定义多个带属性的元素"></a> 7.定义多个带属性的元素</h2><p>如果输入 ul&gt;li.item$*3，将会生成如下代码：</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="selector-tag">ul</span>&gt;  </div><div class="line"></div><div class="line">  &lt;li class="item1"&gt;&lt;/li&gt;  </div><div class="line"></div><div class="line">  &lt;li class="item2"&gt;&lt;/li&gt;  </div><div class="line"></div><div class="line">  &lt;li class="item3"&gt;&lt;/li&gt;  </div><div class="line"></div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure><p>更多请参考：<a href="http://www.iteye.com/news/27580" target="_blank" rel="external">http://www.iteye.com/news/27580</a></p><p>文档：<a href="http://docs.emmet.io/" target="_blank" rel="external">http://docs.emmet.io/</a>（其中包含了一个Demo，你可以试验文中所提到的这些缩写）</p><p>Via <a href="http://coding.smashingmagazine.com/2013/03/26/goodbye-zen-coding-hello-emmet/" target="_blank" rel="external">smashingmagazine</a></p><p>更多技术干货—<a href="http://jimmy9876.top">Jimmy的技术乐园</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Oct 16 2017 16:21:03 GMT+0800 (CST) --&gt;&lt;p&gt;Emmet的前身是大名鼎鼎的Zen coding，如果你从事Web&lt;a href=&quot;http://lib.csdn.net/base/javascript&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;前端开发&lt;/a&gt;的话，对该插件一定不会陌生。它使用仿CSS选择器的语法来生成代码，大大提高了HTML/CSS代码编写的速度，当然Sublime Text也支持改插件，&lt;strong&gt;默认在Sublime Text3种自带了这个插件&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Sublime插件" scheme="http://jimmy9876.top/tags/Sublime%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>同花顺笔试题精选</title>
    <link href="http://jimmy9876.top/2017/06/06/%E5%90%8C%E8%8A%B1%E9%A1%BA%E7%AC%94%E8%AF%95%E9%A2%98%E7%B2%BE%E9%80%89/"/>
    <id>http://jimmy9876.top/2017/06/06/同花顺笔试题精选/</id>
    <published>2017-06-06T13:23:56.000Z</published>
    <updated>2017-10-16T07:16:33.212Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Oct 16 2017 16:21:04 GMT+0800 (CST) --><blockquote><p>今天做了同花顺在线笔试，感觉还行。。。</p></blockquote><p>分享一下笔试题==</p><a id="more"></a><h2 id="1"><a class="markdownIt-Anchor" href="#1"></a> 1</h2><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fgbss1wh38j30v703sjrq.jpg" alt=""></p><h2 id="2"><a class="markdownIt-Anchor" href="#2"></a> 2</h2><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fgbss1ih70j30t303eq3i.jpg" alt=""></p><h2 id="3"><a class="markdownIt-Anchor" href="#3"></a> 3</h2><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fgbss1exzmj311y0lcq4p.jpg" alt=""></p><h2 id="4"><a class="markdownIt-Anchor" href="#4"></a> 4</h2><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fgbsrxt250j30ti04k0ta.jpg" alt=""></p><h2 id="5"><a class="markdownIt-Anchor" href="#5"></a> 5</h2><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fgbsrxutg8j30fr07baas.jpg" alt=""></p><h2 id="6"><a class="markdownIt-Anchor" href="#6"></a> 6</h2><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fgbsrwvzy5j30ro0c1q4n.jpg" alt=""></p><h2 id="7"><a class="markdownIt-Anchor" href="#7"></a> 7</h2><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fgbsrwx5e3j30m7045wf0.jpg" alt=""></p><p><strong>这张截图的时候手抖</strong>😂</p><h2 id="8"><a class="markdownIt-Anchor" href="#8"></a> 8</h2><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fgbsrwnjbbj30gf037jrm.jpg" alt=""></p><h2 id="9"><a class="markdownIt-Anchor" href="#9"></a> 9</h2><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fgbsrwce44j30ok05vq3m.jpg" alt=""></p><h2 id="10"><a class="markdownIt-Anchor" href="#10"></a> 10</h2><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fgbsrw8cpmj30m707cdgc.jpg" alt=""></p><p>基本就是这些，答案一般来说<a href="https://www.google.com.hk" target="_blank" rel="external">google</a>一下就有,我在这里就不放出来了，大家自行搜索了解==</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Oct 16 2017 16:21:04 GMT+0800 (CST) --&gt;&lt;blockquote&gt;&lt;p&gt;今天做了同花顺在线笔试，感觉还行。。。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;分享一下笔试题==&lt;/p&gt;
    
    </summary>
    
    
      <category term="笔试" scheme="http://jimmy9876.top/tags/%E7%AC%94%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>C++中的struct和class的区别</title>
    <link href="http://jimmy9876.top/2017/06/06/C-%E4%B8%AD%E7%9A%84struct%E5%92%8Cclass%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://jimmy9876.top/2017/06/06/C-中的struct和class的区别/</id>
    <published>2017-06-06T10:58:57.000Z</published>
    <updated>2017-10-16T07:16:33.209Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Oct 16 2017 16:21:03 GMT+0800 (CST) --><blockquote><p>C++中的struct对C中的struct进行了扩充，它已经不再只是一个包含不同数据类型的数据结构了，它已经获取了太多的功能。</p></blockquote><p>struct能包含成员函数吗？ 能！<br>struct能继承吗？ 能！！<br>struct能实现多态吗？ 能！！！</p><a id="more"></a><p>既然这些它都能实现，那它和class还能有什么区别？</p><p>最本质的一个区别就是默认的访问控制，体现在两个方面：</p><h2 id="1默认的继承访问权限-struct是public的class是private的"><a class="markdownIt-Anchor" href="#1默认的继承访问权限-struct是public的class是private的"></a> 1）默认的继承访问权限。struct是public的，class是private的。</h2><p>你可以写如下的代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">A</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line"><span class="keyword">char</span> a;</div><div class="line">&#125;；</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">B</span> :</span> A</div><div class="line">&#123;</div><div class="line"><span class="keyword">char</span> b;</div><div class="line">&#125;；</div></pre></td></tr></table></figure><p>这个时候B是public继承A的。</p><p>如果都将上面的struct改成class，那么B是private继承A的。这就是默认的继承访问权限。</p><p>所以我们在平时写类继承的时候，通常会这样写：<br>struct B : public A</p><p>就是为了指明是public继承，而不是用默认的private继承。</p><p>当然，到底默认是public继承还是private继承，取决于子类而不是基类。</p><p>我的意思是，struct可以继承class，同样class也可以继承struct，那么默认的继承访问权限是看子类到底是用的struct还是class。如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">A</span>&#123;</span>&#125;；<span class="class"><span class="keyword">class</span> <span class="title">B</span> :</span> A&#123;&#125;; <span class="comment">//private继承</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">C</span> :</span> B&#123;&#125;； <span class="comment">//public继承</span></div></pre></td></tr></table></figure><h2 id="2struct作为数据结构的实现体它默认的数据访问控制是public的而class作为对象的实现体它默认的成员变量访问控制是private的"><a class="markdownIt-Anchor" href="#2struct作为数据结构的实现体它默认的数据访问控制是public的而class作为对象的实现体它默认的成员变量访问控制是private的"></a> 2）struct作为数据结构的实现体，它默认的数据访问控制是public的，而class作为对象的实现体，它默认的成员变量访问控制是private的。</h2><p>注意我上面的用词，我依旧强调struct是一种数据结构的实现体，虽然它是可以像class一样的用。我依旧将struct里的变量叫数据，class内的变量叫成员，虽然它们并无区别。</p><p>其实，到底是用struct还是class，完全看个人的喜好，你可以将你程序里所有的class全部替换成struct，它依旧可以很正常的运行。但我给出的最好建议，还是：当你觉得你要做的更像是一种数据结构的话，那么用struct，如果你要做的更像是一种对象的话，那么用class。</p><p>当然，我在这里还要强调一点的就是，对于访问控制，应该在程序里明确的指出，而不是依靠默认，这是一个良好的习惯，也让你的代码更具可读性。</p><p>说到这里，很多了解的人或许都认为这个话题可以结束了，因为他们知道struct和class的“唯一”区别就是访问控制。很多文献上也确实只提到这一个区别。</p><p>但我上面却没有用“唯一”，而是说的“最本质”，那是因为，它们确实还有另一个区别，虽然那个区别我们平时可能很少涉及。那就是：“class”这个关键字还用于定义模板参数，就像“typename”。但关键字“struct”不用于定义模板参数。这一点在Stanley B.Lippman写的Inside the C++ Object Model有过说明。</p><p>问题讨论到这里，基本上应该可以结束了。但有人曾说过，他还发现过其他的“区别”，那么，让我们来看看，这到底是不是又一个区别。还是上面所说的，C++中的struct是对C中的struct的扩充，既然是扩充，那么它就要兼容过去C中struct应有的所有特性。例如你可以这样写：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">A</span> //定义一个<span class="title">struct</span></span></div><div class="line"><span class="class"></span></div><div class="line"><span class="class">&#123;</span></div><div class="line"></div><div class="line"><span class="keyword">char</span> c1;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n2;</div><div class="line"></div><div class="line"><span class="keyword">double</span> db3;</div><div class="line"></div><div class="line">&#125;;</div><div class="line"></div><div class="line">A a=&#123;<span class="string">'p'</span>,<span class="number">7</span>,<span class="number">3.1415926</span>&#125;; <span class="comment">//定义时直接赋值</span></div></pre></td></tr></table></figure><p>也就是说struct可以在定义的时候用{}赋初值。那么问题来了，class行不行呢？将上面的struct改成class，试试看。报错！噢~于是那人跳出来说，他又找到了一个区别。我们仔细看看，这真的又是一个区别吗？</p><p>你试着向上面的struct中加入一个构造函数（或虚函数），你会发现什么？<br>对，struct也不能用{}赋初值了。</p><p>的确，以{}的方式来赋初值，只是用一个初始化列表来对数据进行按顺序的初始化，如上面如果写成A a={‘p’,7};则c1,n2被初始化，而db3没有。这样简单的copy操作，只能发生在简单的数据结构上，而不应该放在对象上。加入一个构造函数或是一个虚函数会使struct更体现出一种对象的特性，而使此{}操作不再有效。</p><p>事实上，是因为加入这样的函数，使得类的内部结构发生了变化。而加入一个普通的成员函数呢？你会发现{}依旧可用。其实你可以将普通的函数理解成对数据结构的一种算法，这并不打破它数据结构的特性。</p><p>那么，看到这里，我们发现即使是struct想用{}来赋初值，它也必须满足很多的约束条件，这些条件实际上就是让struct更体现出一种数据机构而不是类的特性。</p><p>那为什么我们在上面仅仅将struct改成class，{}就不能用了呢？</p><p>其实问题恰巧是我们之前所讲的——访问控制！你看看，我们忘记了什么？对，将struct改成class的时候，访问控制由public变为private了，那当然就不能用{}来赋初值了。加上一个public，你会发现，class也是能用{}的，和struct毫无区别！！！</p><p>做个总结，从上面的区别，我们可以看出，struct更适合看成是一个数据结构的实现体，class更适合看成是一个对象的实现体。</p><p>来自：<a href="http://hi.baidu.com/pengxiangbobin19890125/blog/item/b05586eee77300212df53411.html" target="_blank" rel="external">http://hi.baidu.com/pengxiangbobin19890125/blog/item/b05586eee77300212df53411.html</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Oct 16 2017 16:21:03 GMT+0800 (CST) --&gt;&lt;blockquote&gt;&lt;p&gt;C++中的struct对C中的struct进行了扩充，它已经不再只是一个包含不同数据类型的数据结构了，它已经获取了太多的功能。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;struct能包含成员函数吗？ 能！&lt;br&gt;struct能继承吗？ 能！！&lt;br&gt;struct能实现多态吗？ 能！！！&lt;/p&gt;
    
    </summary>
    
    
      <category term="C++" scheme="http://jimmy9876.top/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>MPV播放器使用手册</title>
    <link href="http://jimmy9876.top/2017/06/06/MPV%E6%92%AD%E6%94%BE%E5%99%A8%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/"/>
    <id>http://jimmy9876.top/2017/06/06/MPV播放器使用手册/</id>
    <published>2017-06-06T08:54:21.000Z</published>
    <updated>2017-10-16T07:16:33.210Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Oct 16 2017 16:21:04 GMT+0800 (CST) --><p>最近换了视频播放器，因为搜索到的内容大都对 mpv 一片好评，所以开始试用 mpv。</p><blockquote><p>他是个单文件播放器，是mplayer和mplayer2的活跃分支（可能也是最活跃？）</p></blockquote><a id="more"></a><h1 id="默认快捷键"><a class="markdownIt-Anchor" href="#默认快捷键"></a> 默认快捷键</h1><blockquote><p>跟大多数播放器类似的常用快捷键</p></blockquote><ul><li>SPACE 暂停/播放切换</li><li>UP 快进 60 秒</li><li>DOWN 回退 60 秒</li><li>LEFT 回退 5 秒</li><li>RIGHT 快进 5 秒</li></ul><blockquote><p>其他常用快捷键</p></blockquote><ul><li>j 循环选择字幕</li><li>J 反向循环选择字幕</li><li># 循环切换音轨</li><li>f 切换全屏状态</li><li>T 切换视频窗口是否总在最前</li><li>s 视频截图，包含字幕</li><li>S 视频截图，不带字幕</li><li>Alt+s 自动逐帧视频截图，再按一次停止截图</li><li>. 进到下一帧</li><li>, 退到前一帧</li><li>9 音量减 2</li><li>0 音量加 2</li><li>[ 0.9091 倍慢速播放</li><li>] 1.1 倍快速播放</li><li>{ 0.5 倍慢速播放</li><li>} 2 倍快速播放</li><li>Backspace 重置为正常播放速度</li></ul><h1 id="官方文档"><a class="markdownIt-Anchor" href="#官方文档"></a> 官方文档</h1><ul><li><a href="https://github.com/mpv-player/mpv/blob/master/etc/input.conf" target="_blank" rel="external">mpv keybindings</a></li><li><a href="https://github.com/mpv-player/mpv/blob/master/DOCS/man/options.rst" target="_blank" rel="external">mpv options</a></li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Oct 16 2017 16:21:04 GMT+0800 (CST) --&gt;&lt;p&gt;最近换了视频播放器，因为搜索到的内容大都对 mpv 一片好评，所以开始试用 mpv。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;他是个单文件播放器，是mplayer和mplayer2的活跃分支（可能也是最活跃？）&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="mpv" scheme="http://jimmy9876.top/tags/mpv/"/>
    
  </entry>
  
  <entry>
    <title>进程与线程的一个简单解释</title>
    <link href="http://jimmy9876.top/2017/06/05/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E8%A7%A3%E9%87%8A/"/>
    <id>http://jimmy9876.top/2017/06/05/进程与线程的一个简单解释/</id>
    <published>2017-06-05T13:36:31.000Z</published>
    <updated>2017-10-16T07:16:33.214Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Oct 16 2017 16:21:04 GMT+0800 (CST) --><h1 id="进程与线程的一个简单解释"><a class="markdownIt-Anchor" href="#进程与线程的一个简单解释"></a> 进程与线程的一个简单解释</h1><blockquote><p><a href="https://zh.wikipedia.org/zh-cn/%E8%BF%9B%E7%A8%8B" target="_blank" rel="external">进程</a>（process）和<a href="https://zh.wikipedia.org/zh-cn/%E7%BA%BF%E7%A8%8B" target="_blank" rel="external">线程</a>（thread）是操作系统的基本概念，但是它们比较抽象，不容易掌握。</p></blockquote><p>今天看到一篇<a href="http://www.qnx.com/developers/docs/6.4.1/neutrino/getting_started/s1_procs.html" target="_blank" rel="external">文章</a>，发现有一个很好的类比，可以把它们解释地清晰易懂。</p><ol><li></li></ol><p><img src="http://image.beekka.com/blog/201304/bg2013042401.jpg" alt="img"></p><p>计算机的核心是CPU，它承担了所有的计算任务。它就像一座工厂，时刻在运行。</p><ol start="2"><li></li></ol><p><img src="http://image.beekka.com/blog/201304/bg2013042402.png" alt="img"></p><p>假定工厂的电力有限，一次只能供给一个车间使用。也就是说，一个车间开工的时候，其他车间都必须停工。背后的含义就是，单个CPU一次只能运行一个任务。</p><ol start="3"><li></li></ol><p><img src="http://image.beekka.com/blog/201304/bg2013042403.jpg" alt="img"></p><p>进程就好比工厂的车间，它代表CPU所能处理的单个任务。任一时刻，CPU总是运行一个进程，其他进程处于非运行状态。</p><ol start="4"><li></li></ol><p><img src="http://image.beekka.com/blog/201304/bg2013042404.jpg" alt="img"></p><p>一个车间里，可以有很多工人。他们协同完成一个任务。</p><ol start="5"><li></li></ol><p><img src="http://image.beekka.com/blog/201304/bg2013042405.jpg" alt="img"></p><p>线程就好比车间里的工人。一个进程可以包括多个线程。</p><ol start="6"><li></li></ol><p><img src="http://image.beekka.com/blog/201304/bg2013042406.png" alt="img"></p><p>车间的空间是工人们共享的，比如许多房间是每个工人都可以进出的。这象征一个进程的内存空间是共享的，每个线程都可以使用这些共享内存。</p><ol start="7"><li></li></ol><p><img src="http://image.beekka.com/blog/201304/bg2013042407.jpg" alt="img"></p><p>可是，每间房间的大小不同，有些房间最多只能容纳一个人，比如厕所。里面有人的时候，其他人就不能进去了。这代表一个线程使用某些共享内存时，其他线程必须等它结束，才能使用这一块内存。</p><ol start="8"><li></li></ol><p><img src="http://image.beekka.com/blog/201304/bg2013042408.jpg" alt="img"></p><p>一个防止他人进入的简单方法，就是门口加一把锁。先到的人锁上门，后到的人看到上锁，就在门口排队，等锁打开再进去。这就叫<a href="http://zh.wikipedia.org/wiki/%E4%BA%92%E6%96%A5%E9%94%81" target="_blank" rel="external">&quot;互斥锁&quot;</a>（Mutual exclusion，缩写 Mutex），防止多个线程同时读写某一块内存区域。</p><ol start="9"><li></li></ol><p><img src="http://image.beekka.com/blog/201304/bg2013042409.jpg" alt="img"></p><p>还有些房间，可以同时容纳n个人，比如厨房。也就是说，如果人数大于n，多出来的人只能在外面等着。这好比某些内存区域，只能供给固定数目的线程使用。</p><ol start="10"><li></li></ol><p><img src="http://image.beekka.com/blog/201304/bg2013042410.jpg" alt="img"></p><p>这时的解决方法，就是在门口挂n把钥匙。进去的人就取一把钥匙，出来时再把钥匙挂回原处。后到的人发现钥匙架空了，就知道必须在门口排队等着了。这种做法叫做<a href="http://en.wikipedia.org/wiki/Semaphore_(programming)" target="_blank" rel="external">&quot;信号量&quot;</a>（Semaphore），用来保证多个线程不会互相冲突。</p><p>不难看出，mutex是semaphore的一种特殊情况（n=1时）。也就是说，完全可以用后者替代前者。但是，因为mutex较为简单，且效率高，所以在必须保证资源独占的情况下，还是采用这种设计。</p><ol start="11"><li></li></ol><p><img src="http://image.beekka.com/blog/201304/bg2013042411.png" alt="img"></p><p>操作系统的设计，因此可以归结为三点：</p><p>（1）以多进程形式，允许多个任务同时运行；</p><p>（2）以多线程形式，允许单个任务分成不同的部分运行；</p><p>（3）提供协调机制，一方面防止进程之间和线程之间产生冲突，另一方面允许进程之间和线程之间共享资源。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Oct 16 2017 16:21:04 GMT+0800 (CST) --&gt;&lt;h1 id=&quot;进程与线程的一个简单解释&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#进程与线程的一个简单解释&quot;&gt;&lt;/a&gt; 进程与线
      
    
    </summary>
    
    
      <category term="操作系统" scheme="http://jimmy9876.top/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>js闭包</title>
    <link href="http://jimmy9876.top/2017/06/04/js%E9%97%AD%E5%8C%85/"/>
    <id>http://jimmy9876.top/2017/06/04/js闭包/</id>
    <published>2017-06-04T13:07:05.000Z</published>
    <updated>2017-10-16T07:16:33.211Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Oct 16 2017 16:21:04 GMT+0800 (CST) --><h1 id="javascript-闭包"><a class="markdownIt-Anchor" href="#javascript-闭包"></a> JavaScript 闭包</h1><hr><p>JavaScript 变量可以是局部变量或全局变量。</p><p>私有变量可以用到闭包。</p><hr><a id="more"></a><h2 id="全局变量"><a class="markdownIt-Anchor" href="#全局变量"></a> 全局变量</h2><p>函数可以访问由函数内部定义的变量，如：</p><h2 id="实例"><a class="markdownIt-Anchor" href="#实例"></a> 实例</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> a = <span class="number">4</span>;</div><div class="line">    <span class="keyword">return</span> a * a;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>函数也可以访问函数外部定义的变量，如：</p><h2 id="实例-2"><a class="markdownIt-Anchor" href="#实例-2"></a> 实例</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">4</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>) </span>&#123;</div><div class="line">​    <span class="keyword">return</span> a * a;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>后面一个实例中， <strong>a</strong> 是一个 <strong>全局</strong> 变量。</p><p>在web页面中全局变量属于 window 对象。</p><p>全局变量可应用于页面上的所有脚本。</p><p>在第一个实例中， <strong>a</strong> 是一个 <strong>局部</strong> 变量。</p><p>局部变量只能用于定义它函数内部。对于其他的函数或脚本代码是不可用的。</p><p>全局和局部变量即便名称相同，它们也是两个不同的变量。修改其中一个，不会影响另一个的值。</p><table><thead><tr><th><img src="http://www.runoob.com/images/lamp.jpg" alt="Note"></th><th>变量声明时如果不使用 <strong>var</strong> 关键字，那么它就是一个全局变量，即便它在函数内定义。</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><hr><h2 id="变量生命周期"><a class="markdownIt-Anchor" href="#变量生命周期"></a> 变量生命周期</h2><p>全局变量的作用域是全局性的，即在整个JavaScript程序中，全局变量处处都在。</p><p>而在函数内部声明的变量，只在函数内部起作用。这些变量是局部变量，作用域是局部性的；函数的参数也是局部性的，只在函数内部起作用。</p><hr><h2 id="计数器困境"><a class="markdownIt-Anchor" href="#计数器困境"></a> 计数器困境</h2><p>设想下如果你想统计一些数值，且该计数器在所有函数中都是可用的。</p><p>你可以使用全局变量，函数设置计数器递增：</p><h2 id="实例-3"><a class="markdownIt-Anchor" href="#实例-3"></a> 实例</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> counter = <span class="number">0</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>) </span>&#123;</div><div class="line">   <span class="keyword">return</span> counter += <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line">add();</div><div class="line">add();</div><div class="line">add();</div><div class="line"><span class="comment">// 计数器现在为 3</span></div></pre></td></tr></table></figure><p>计数器数值在执行 add() 函数时发生变化。</p><p>但问题来了，页面上的任何脚本都能改变计数器，即便没有调用 add() 函数。</p><p>如果我在函数内声明计数器，如果没有调用函数将无法修改计数器的值：</p><h2 id="实例-4"><a class="markdownIt-Anchor" href="#实例-4"></a> 实例</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>) </span>&#123;</div><div class="line">​    <span class="keyword">var</span> counter = <span class="number">0</span>;</div><div class="line">​    counter += <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line">add();</div><div class="line">add();</div><div class="line">add();</div><div class="line"><span class="comment">// 本意是想输出 3, 但事与愿违，输出的都是 1 !</span></div></pre></td></tr></table></figure><p>以上代码将无法正确输出，每次我调用 add() 函数，计数器都会设置为 1。</p><p><strong>JavaScript 内嵌函数可以解决该问题。</strong></p><hr><h2 id="javascript-内嵌函数"><a class="markdownIt-Anchor" href="#javascript-内嵌函数"></a> JavaScript 内嵌函数</h2><p>所有函数都能访问全局变量。</p><p>实际上，在 JavaScript 中，所有函数都能访问它们上一层的作用域。</p><p>JavaScript 支持嵌套函数。嵌套函数可以访问上一层的函数变量。</p><p>该实例中，内嵌函数 <strong>plus()</strong> 可以访问父函数的 <strong>counter</strong> 变量：</p><h2 id="实例-5"><a class="markdownIt-Anchor" href="#实例-5"></a> 实例</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>) </span>&#123;</div><div class="line">​    <span class="keyword">var</span> counter = <span class="number">0</span>;</div><div class="line">​    <span class="function"><span class="keyword">function</span> <span class="title">plus</span>(<span class="params"></span>) </span>&#123;counter += <span class="number">1</span>;&#125;</div><div class="line">​    plus();    </div><div class="line">​    <span class="keyword">return</span> counter; </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>如果我们能在外部访问 <strong>plus()</strong> 函数，这样就能解决计数器的困境。</p><p>我们同样需要确保 <strong>counter = 0</strong> 只执行一次。</p><p><strong>我们需要闭包。</strong></p><hr><h2 id="javascript-闭包-2"><a class="markdownIt-Anchor" href="#javascript-闭包-2"></a> JavaScript 闭包</h2><p>还记得函数自我调用吗？该函数会做什么？</p><h2 id="实例-6"><a class="markdownIt-Anchor" href="#实例-6"></a> 实例</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> add = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">​    <span class="keyword">var</span> counter = <span class="number">0</span>;</div><div class="line">​    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="keyword">return</span> counter += <span class="number">1</span>;&#125;</div><div class="line">&#125;)();</div><div class="line">add();</div><div class="line">add();</div><div class="line">add();</div><div class="line"><span class="comment">// 计数器为 3</span></div></pre></td></tr></table></figure><h2 id="实例解析"><a class="markdownIt-Anchor" href="#实例解析"></a> 实例解析</h2><p>变量 <strong>add</strong> 指定了函数自我调用的返回字值。</p><p>自我调用函数只执行一次。设置计数器为 0。并返回函数表达式。</p><p>add变量可以作为一个函数使用。非常棒的部分是它可以访问函数上一层作用域的计数器。</p><p>这个叫作 JavaScript **闭包。**它使得函数拥有私有变量变成可能。</p><p>计数器受匿名函数的作用域保护，只能通过 add 方法修改。</p><table><thead><tr><th><img src="http://www.runoob.com/images/lamp.jpg" alt="Note"></th><th>闭包是可访问上一层函数作用域里变量的函数，即便上一层函数已经关闭。</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Oct 16 2017 16:21:04 GMT+0800 (CST) --&gt;&lt;h1 id=&quot;javascript-闭包&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#javascript-闭包&quot;&gt;&lt;/a&gt; JavaScript 闭包&lt;/h1&gt;&lt;hr&gt;&lt;p&gt;JavaScript 变量可以是局部变量或全局变量。&lt;/p&gt;&lt;p&gt;私有变量可以用到闭包。&lt;/p&gt;&lt;hr&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://jimmy9876.top/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>HTTP状态码</title>
    <link href="http://jimmy9876.top/2017/06/04/HTTP%E7%8A%B6%E6%80%81%E7%A0%81/"/>
    <id>http://jimmy9876.top/2017/06/04/HTTP状态码/</id>
    <published>2017-06-04T12:39:47.000Z</published>
    <updated>2017-10-16T07:16:33.210Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Oct 16 2017 16:21:03 GMT+0800 (CST) --><blockquote><p>当浏览者访问一个网页时，浏览者的浏览器会向网页所在服务器发出请求。当浏览器接收并显示网页前，此网页所在的服务器会返回一个包含HTTP状态码的信息头（server header）用以响应浏览器的请求。</p></blockquote><a id="more"></a><p>HTTP状态码的英文为HTTP Status Code。</p><p>下面是常见的HTTP状态码：</p><ul><li>200 - 请求成功</li><li>301 - 资源（网页等）被永久转移到其它URL</li><li>404 - 请求的资源（网页等）不存在</li><li>500 - 内部服务器错误</li></ul><h2 id="http状态码分类"><a class="markdownIt-Anchor" href="#http状态码分类"></a> HTTP状态码分类</h2><p>HTTP状态码由三个十进制数字组成，第一个十进制数字定义了状态码的类型，后两个数字没有分类的作用。HTTP状态码共分为5种类型：</p><table><thead><tr><th>分类</th><th>分类描述</th></tr></thead><tbody><tr><td>1**</td><td>信息，服务器收到请求，需要请求者继续执行操作</td></tr><tr><td>2**</td><td>成功，操作被成功接收并处理</td></tr><tr><td>3**</td><td>重定向，需要进一步的操作以完成请求</td></tr><tr><td>4**</td><td>客户端错误，请求包含语法错误或无法完成请求</td></tr><tr><td>5**</td><td>服务器错误，服务器在处理请求的过程中发生了错误</td></tr></tbody></table><p>HTTP状态码列表:</p><table><thead><tr><th>状态码</th><th>状态码英文名称</th><th>中文描述</th></tr></thead><tbody><tr><td>100</td><td>Continue</td><td>继续。<a href="http://www.dreamdu.com/webbuild/client_vs_server/" target="_blank" rel="external">客户端</a>应继续其请求</td></tr><tr><td>101</td><td>Switching Protocols</td><td>切换协议。服务器根据客户端的请求切换协议。只能切换到更高级的协议，例如，切换到HTTP的新版本协议</td></tr><tr><td></td><td></td><td></td></tr><tr><td>200</td><td>OK</td><td>请求成功。一般用于GET与POST请求</td></tr><tr><td>201</td><td>Created</td><td>已创建。成功请求并创建了新的资源</td></tr><tr><td>202</td><td>Accepted</td><td>已接受。已经接受请求，但未处理完成</td></tr><tr><td>203</td><td>Non-Authoritative Information</td><td>非授权信息。请求成功。但返回的meta信息不在原始的服务器，而是一个副本</td></tr><tr><td>204</td><td>No Content</td><td>无内容。服务器成功处理，但未返回内容。在未更新网页的情况下，可确保浏览器继续显示当前文档</td></tr><tr><td>205</td><td>Reset Content</td><td>重置内容。服务器处理成功，用户终端（例如：浏览器）应重置文档视图。可通过此返回码清除浏览器的表单域</td></tr><tr><td>206</td><td>Partial Content</td><td>部分内容。服务器成功处理了部分GET请求</td></tr><tr><td></td><td></td><td></td></tr><tr><td>300</td><td>Multiple Choices</td><td>多种选择。请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端（例如：浏览器）选择</td></tr><tr><td>301</td><td>Moved Permanently</td><td>永久移动。请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替</td></tr><tr><td>302</td><td>Found</td><td>临时移动。与301类似。但资源只是临时被移动。客户端应继续使用原有URI</td></tr><tr><td>303</td><td>See Other</td><td>查看其它地址。与301类似。使用GET和POST请求查看</td></tr><tr><td>304</td><td>Not Modified</td><td>未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源</td></tr><tr><td>305</td><td>Use Proxy</td><td>使用代理。所请求的资源必须通过代理访问</td></tr><tr><td>306</td><td>Unused</td><td>已经被废弃的HTTP状态码</td></tr><tr><td>307</td><td>Temporary Redirect</td><td>临时重定向。与302类似。使用GET请求重定向</td></tr><tr><td></td><td></td><td></td></tr><tr><td>400</td><td>Bad Request</td><td>客户端请求的语法错误，服务器无法理解</td></tr><tr><td>401</td><td>Unauthorized</td><td>请求要求用户的身份认证</td></tr><tr><td>402</td><td>Payment Required</td><td>保留，将来使用</td></tr><tr><td>403</td><td>Forbidden</td><td>服务器理解请求客户端的请求，但是拒绝执行此请求</td></tr><tr><td>404</td><td>Not Found</td><td>服务器无法根据客户端的请求找到资源（网页）。通过此代码，网站设计人员可设置&quot;您所请求的资源无法找到&quot;的个性页面</td></tr><tr><td>405</td><td>Method Not Allowed</td><td>客户端请求中的方法被禁止</td></tr><tr><td>406</td><td>Not Acceptable</td><td>服务器无法根据客户端请求的内容特性完成请求</td></tr><tr><td>407</td><td>Proxy Authentication Required</td><td>请求要求代理的身份认证，与401类似，但请求者应当使用代理进行授权</td></tr><tr><td>408</td><td>Request Time-out</td><td>服务器等待客户端发送的请求时间过长，超时</td></tr><tr><td>409</td><td>Conflict</td><td>服务器完成客户端的PUT请求是可能返回此代码，服务器处理请求时发生了冲突</td></tr><tr><td>410</td><td>Gone</td><td>客户端请求的资源已经不存在。410不同于404，如果资源以前有现在被永久删除了可使用410代码，网站设计人员可通过301代码指定资源的新位置</td></tr><tr><td>411</td><td>Length Required</td><td>服务器无法处理客户端发送的不带Content-Length的请求信息</td></tr><tr><td>412</td><td>Precondition Failed</td><td>客户端请求信息的先决条件错误</td></tr><tr><td>413</td><td>Request Entity Too Large</td><td>由于请求的实体过大，服务器无法处理，因此拒绝请求。为防止客户端的连续请求，服务器可能会关闭连接。如果只是服务器暂时无法处理，则会包含一个Retry-After的响应信息</td></tr><tr><td>414</td><td>Request-URI Too Large</td><td>请求的URI过长（URI通常为网址），服务器无法处理</td></tr><tr><td>415</td><td>Unsupported Media Type</td><td>服务器无法处理请求附带的媒体格式</td></tr><tr><td>416</td><td>Requested range not satisfiable</td><td>客户端请求的范围无效</td></tr><tr><td>417</td><td>Expectation Failed</td><td>服务器无法满足Expect的请求头信息</td></tr><tr><td></td><td></td><td></td></tr><tr><td>500</td><td>Internal Server Error</td><td>服务器内部错误，无法完成请求</td></tr><tr><td>501</td><td>Not Implemented</td><td>服务器不支持请求的功能，无法完成请求</td></tr><tr><td>502</td><td>Bad Gateway</td><td>充当网关或代理的服务器，从远端服务器接收到了一个无效的请求</td></tr><tr><td>503</td><td>Service Unavailable</td><td>由于超载或系统维护，服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的Retry-After头信息中</td></tr><tr><td>504</td><td>Gateway Time-out</td><td>充当网关或代理的服务器，未及时从远端服务器获取请求</td></tr><tr><td>505</td><td>HTTP Version not supported</td><td>服务器不支持请求的HTTP协议的版本，无法完成处理</td></tr></tbody></table><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Oct 16 2017 16:21:03 GMT+0800 (CST) --&gt;&lt;blockquote&gt;&lt;p&gt;当浏览者访问一个网页时，浏览者的浏览器会向网页所在服务器发出请求。当浏览器接收并显示网页前，此网页所在的服务器会返回一个包含HTTP状态码的信息头（server header）用以响应浏览器的请求。&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="HTTP" scheme="http://jimmy9876.top/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>CSS中margin和padding的区别</title>
    <link href="http://jimmy9876.top/2017/06/03/CSS%E4%B8%ADmargin%E5%92%8Cpadding%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://jimmy9876.top/2017/06/03/CSS中margin和padding的区别/</id>
    <published>2017-06-03T08:56:57.000Z</published>
    <updated>2017-10-16T07:16:33.209Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Oct 16 2017 16:21:03 GMT+0800 (CST) --><blockquote><p>padding margin都是边距的含义，关键问题得明白是什么相对什么的边距．padding是控件的内容相对控件的边缘的边距．margin是控件边缘相对父空间的边距．</p></blockquote><a id="more"></a><p>在CSS中margin是指从自身边框到另一个容器边框之间的距离，就是容器外距离。在CSS中padding是指自身边框到自身内部另一个容器边框之间的距离，就是容器内距离。</p><p><strong>下面是 padding和margin常用的用法</strong></p><p><strong>一、padding</strong></p><p><strong>1、语法结构</strong></p><p>（1）padding-left:10px; 左内边距</p><p>（2）padding-right:10px; 右内边距</p><p>（3）padding-top:10px; 上内边距</p><p>（4）padding-bottom:10px; 下内边距</p><p>（5）padding：10px; 四边统一内边距</p><p>（6）padding:10px 20px; 上下、左右内边距</p><p>（7）padding:10px 20px 30px; 上、左右、下内边距</p><p>（8）padding:10px 20px 30px 40px; 上、右、下、左内边距</p><p><strong>2、可能取的值</strong></p><p>（1）length 规定具体单位记的内边距长度</p><p>（2）% 基于父元素的宽度的内边距的长度</p><p>（3）auto 浏览器计算内边距</p><p>（4）inherit 规定应该从父元素继承内边距</p><p><strong>3、浏览器兼容问题</strong></p><p>（1）所有浏览器都支持padding属性</p><p>（2）任何版本IE都不支持属性值“inherit”</p><p><strong>二、margin</strong></p><p><strong>1、语法结构</strong></p><p>（1）margin-left:10px; 左外边距</p><p>（2）margin-right:10px; 右外边距</p><p>（3）margin-top:10px; 上外边距</p><p>（4）margin-bottom:10px; 下外边距</p><p>（5）margin:10px; 四边统一外边距</p><p>（6）margin:10px 20px; 上下、左右外边距</p><p>（7）margin:10px 20px 30px; 上、左右、下外边距</p><p>（8）margin:10px 20px 30px 40px; 上、右、下、左外边距</p><p><strong>2、可能取的值</strong></p><p>（1）length 规定具体单位记的外边距长度</p><p>（2）% 基于父元素的宽度的外边距的长度</p><p>（3）auto 浏览器计算外边距</p><p>（4）inherit 规定应该从父元素继承外边距</p><p><strong>3、浏览器兼容问题</strong></p><p>（1）所有浏览器都支持margin属性</p><p>（2）任何版本IE都不支持属性值“inherit”</p><p><strong>三、margin和padding的区别用图表示为</strong></p><p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fg84bkuy2tj30d1097gmd.jpg" alt=""></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Oct 16 2017 16:21:03 GMT+0800 (CST) --&gt;&lt;blockquote&gt;&lt;p&gt;padding margin都是边距的含义，关键问题得明白是什么相对什么的边距．padding是控件的内容相对控件的边缘的边距．margin是控件边缘相对父空间的边距．&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="css" scheme="http://jimmy9876.top/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>php面试题-2-附答案</title>
    <link href="http://jimmy9876.top/2017/06/01/php%E9%9D%A2%E8%AF%95%E9%A2%98-2-%E9%99%84%E7%AD%94%E6%A1%88/"/>
    <id>http://jimmy9876.top/2017/06/01/php面试题-2-附答案/</id>
    <published>2017-06-01T11:07:40.000Z</published>
    <updated>2017-10-16T07:16:33.212Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Oct 16 2017 16:21:04 GMT+0800 (CST) --><h4 id="1-双引号和单引号的区别"><a class="markdownIt-Anchor" href="#1-双引号和单引号的区别"></a> 1、双引号和单引号的区别</h4><ul><li>双引号解释变量，单引号不解释变量</li><li>双引号里插入单引号，其中单引号里如果有变量的话，变量解释</li><li>双引号的变量名后面必须要有一个非数字、字母、下划线的特殊字符，或者用{}讲变量括起来，否则会将变量名后面的部分当做一个整体，引起语法错误</li><li>双引号解释转义字符，单引号不解释转义字符，但是解释’\和\</li><li>能使单引号字符尽量使用单引号，单引号的效率比双引号要高（因为双引号要先遍历一遍，判断里面有没有变量，然后再进行操作，而单引号则不需要判断）</li></ul><h4 id="2-常用的超全局变量8个"><a class="markdownIt-Anchor" href="#2-常用的超全局变量8个"></a> 2、常用的超全局变量(8个)</h4><ul><li>$_GET -----&gt;get传送方式</li><li>$POST -----&gt;post传送方式</li><li>$REQUEST -----&gt;可以接收到get和post两种方式的值</li><li>$GLOBALS -----&gt;所有的变量都放在里面</li><li>$FILE -----&gt;上传文件使用</li><li>$SERVER -----&gt;系统环境变量</li><li>$SESSION -----&gt;会话控制的时候会用到</li><li>$COOKIE -----&gt;会话控制的时候会用到</li></ul><h4 id="3-http中post-get-put-delete方式的区别"><a class="markdownIt-Anchor" href="#3-http中post-get-put-delete方式的区别"></a> 3、HTTP中POST、GET、PUT、DELETE方式的区别</h4><blockquote><p>HTTP定义了与服务器交互的不同的方法，最基本的是POST、GET、PUT、DELETE，与其比不可少的URL的全称是资源描述符，我们可以这样理解：url描述了一个网络上资源，而post、get、put、delete就是对这个资源进行增、删、改、查的操作！</p></blockquote><h5 id="31表单中get和post提交方式的区别"><a class="markdownIt-Anchor" href="#31表单中get和post提交方式的区别"></a> 3.1表单中get和post提交方式的区别</h5><ul><li>get是把参数数据队列加到提交表单的action属性所指的url中，值和表单内各个字段一一对应，从url中可以看到；post是通过HTTP POST机制，将表单内各个字段与其内容防止在HTML的head中一起传送到action属性所指的url地址，用户看不到这个过程</li><li>对于get方式，服务器端用Request.QueryString获取变量的值，对于post方式，服务器端用Request.Form获取提交的数据</li><li>get传送的数据量较小，post传送的数据量较大，一般被默认不受限制，但在理论上，IIS4中最大量为80kb，IIS5中为1000k，get安全性非常低，post安全性较高</li></ul><h5 id="32"><a class="markdownIt-Anchor" href="#32"></a> 3.2</h5><ul><li>GET请求会向数据库发索取数据的请求，从而来获取信息，该请求就像数据库的select操作一样，只是用来查询一下数据，不会修改、增加数据，不会影响资源的内容，即该请求不会产生副作用。无论进行多少次操作，结果都是一样的。</li><li>与GET不同的是，PUT请求是向服务器端发送数据的，从而改变信息，该请求就像数据库的update操作一样，用来修改数据的内容，但是不会增加数据的种类等，也就是说无论进行多少次PUT操作，其结果并没有不同。</li><li>POST请求同PUT请求类似，都是向服务器端发送数据的，但是该请求会改变数据的种类等资源，就像数据库的insert操作一样，会创建新的内容。几乎目前所有的提交操作都是用POST请求的。</li><li>DELETE请求顾名思义，就是用来删除某一个资源的，该请求就像数据库的delete操作。</li></ul><h4 id="4-php介绍"><a class="markdownIt-Anchor" href="#4-php介绍"></a> 4、PHP介绍</h4><p>Hypertext Preprocessor----超文本预处理器</p><p>Personal Home Page 原始名称</p><p><strong>目标用途:</strong> 允许web开发人员快速编写动态生成的web页面，与其他页面相比，PHP是将程序嵌入到HTML文档中去执行，效率比完全生成HTML编辑的CGI高很多</p><p><strong>HTML:</strong> Hypertext Markup Language</p><p><strong>创始人:</strong> 拉姆斯勒·勒多夫Rasmus Lerdorf，1968年生，加拿大滑铁卢大学</p><p>勒多夫最开始是为了维护个人网页，用prel语言写了维护程序，之后又用c进行了重写，最终衍生出php/fi</p><p><strong>时间轴:</strong></p><ul><li>1995.06.08将PHP/FI公开释出</li><li>1995 php2.0，加入了对MySQL的支持</li><li>1997 php3.0</li><li>2000 php4.0</li><li>2008 php5.0</li><li>由于php6.0没有完全解决Unicode编码，所以基本没有生产线上的应用，基本只是一款概念产品，很多功能已经在php5.3.3和php5.3.4上实现</li></ul><p><strong>常见的IDE(Intergrated Development Environment):</strong> 集成开发环境</p><ul><li><a href="http://panic.com/coda/" target="_blank" rel="external">Coda（mac）</a></li><li><a href="http://www.jetbrains.com/phpstorm/" target="_blank" rel="external">PHPStrom</a></li><li><a href="http://www.adobe.com/" target="_blank" rel="external">Adobe Dreamweaver</a></li><li><a href="http://netbeans.org/" target="_blank" rel="external">NetBeans</a></li></ul><p><strong>常见文本编辑器，具备代码高亮：</strong></p><ul><li><a href="https://notepad-plus-plus.org/" target="_blank" rel="external">NodePad++</a></li><li><a href="http://www.sublimetext.com/" target="_blank" rel="external">SublimeText</a></li></ul><h4 id="php优势"><a class="markdownIt-Anchor" href="#php优势"></a> PHP优势</h4><p><strong>PHP特性:</strong></p><ul><li>php独特混合了C,Java,Prel以及PHP自创的语法</li><li>可以比CGI或者Prel更快速去执行动态网页，与其他变成语言相比，PHP是讲程序嵌入到HTML文档中去执行，执行效率比完全生成HTML编辑的CGI要高很多，所有的CGI都能实现</li><li>支持几乎所有流行的数据库以及操作系统</li><li>PHP可以使用C,C++进行程序的扩展</li></ul><p><strong>PHP优势:</strong></p><ul><li>开放源代码</li><li>免费性</li><li>快捷性</li><li>跨平台强</li><li>效率高</li><li>图形处理</li><li>面向对象</li><li>专业专注</li></ul><p><strong>PHP技术应用:</strong></p><ul><li>静态页面生成</li><li>数据库缓存</li><li>过程缓存</li><li>div+css w3c标准</li><li>大负荷</li><li>分布式</li><li>flex</li><li>支持MVC</li><li>Smarty模块引擎</li></ul><h4 id="php认证级别"><a class="markdownIt-Anchor" href="#php认证级别"></a> PHP认证级别</h4><ul><li>初级 IFE:Index Front Engineer 前端工程师</li><li>中级 IPE:Index PHP Engineer PHP工程师</li><li>高级 IAE:Index Architecture Engineer 架构工程师</li></ul><h4 id="6-echo-print_r-print-var_dump之间的区别"><a class="markdownIt-Anchor" href="#6-echo-print_r-print-var_dump之间的区别"></a> 6、echo、print_r、print、var_dump之间的区别</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">* echo、print是php语句，var_dump和print_r是函数</div><div class="line">* echo 输出一个或多个字符串，中间以逗号隔开，没有返回值是语言结构而不是真正的函数，因此不能作为表达式的一部分使用</div><div class="line">* print也是php的一个关键字，有返回值 只能打印出简单类型变量的值(如int，string)，如果字符串显示成功则返回true，否则返回false</div><div class="line">* print_r 可以打印出复杂类型变量的值(如数组、对象）以列表的形式显示，并以array、object开头，但print_r输出布尔值和NULL的结果没有意义，因为都是打印&quot;\n&quot;，因此print_r()函数更适合调试</div><div class="line">* var_dump() 判断一个变量的类型和长度，并输出变量的数值</div></pre></td></tr></table></figure><h4 id="7-http状态码"><a class="markdownIt-Anchor" href="#7-http状态码"></a> 7、HTTP状态码</h4><p><a href="http://www.jianshu.com/p/9ecfda409eeb" target="_blank" rel="external">点击这儿查看HTTP状态码详解</a></p><p><strong>常见的HTTP状态码：</strong></p><ul><li>200 - 请求成功</li><li>301 - 资源(网页等)被永久转义到其他URL</li><li>404 - 请求的资源(网页等)不存在</li><li>505 - 内部服务器错误</li></ul><p><strong>HTTP状态码分类:</strong></p><ul><li>1** - 信息，服务器收到的请求，需要请求者继续执行操作</li><li>2** - 成功，操作被成功接收并处理</li><li>3** - 重定向，需要进一步的操作以完成请求</li><li>4** - 客户端错误，请求包含语法错误或者无法完成请求</li><li>5** 服务器错误，服务器在处理请求的过程<br>中发生了错误</li></ul><h4 id="8-什么是魔术引号"><a class="markdownIt-Anchor" href="#8-什么是魔术引号"></a> 8、什么是魔术引号</h4><p>魔术引号是一个将自动将进入PHP脚本的数据进行转义的过程，最好在编码时不要转义而在运行时根据需要而转义</p><h4 id="9-如何获取客户端的ip要求取得一个int和服务器ip的代码"><a class="markdownIt-Anchor" href="#9-如何获取客户端的ip要求取得一个int和服务器ip的代码"></a> 9、如何获取客户端的ip(要求取得一个int)和服务器ip的代码</h4><p>客户端：<code>$_SERVER[&quot;REMOTE_ADDR&quot;];或者getenv('REMOTE_ADDR')</code><br><code>ip2long进行转换</code><br>服务器端：<code>gethostbyname('www.baidu.com')</code></p><h5 id="10-使用那些工具进行版本控制"><a class="markdownIt-Anchor" href="#10-使用那些工具进行版本控制"></a> 10、使用那些工具进行版本控制</h5><p>cvs、svn、vss、git</p><h4 id="11-优化数据库的方法"><a class="markdownIt-Anchor" href="#11-优化数据库的方法"></a> 11、优化数据库的方法</h4><h6 id="mysql数据库优化的八大方式经典必看点击获取"><a class="markdownIt-Anchor" href="#mysql数据库优化的八大方式经典必看点击获取"></a> <a href="http://www.jianshu.com/p/dac715a88b44" target="_blank" rel="external">MySQL数据库优化的八大方式（经典必看）点击获取</a></h6><ul><li>选取最适用的字段属性，尽可能减少定义字段宽度，尽量把字段设置NOTNULL，例如’省份’、'性别’最好适用ENUM</li><li>使用连接(JOIN)来代替子查询</li><li>适用联合(UNION)来代替手动创建的临时表</li><li>事务处理</li><li>锁定表、优化事务处理</li><li>适用外键，优化锁定表</li><li>建立索引</li><li>优化查询语句</li></ul><h4 id="12-是否使用过模板引擎使用的模板引擎的名字是"><a class="markdownIt-Anchor" href="#12-是否使用过模板引擎使用的模板引擎的名字是"></a> 12、是否使用过模板引擎？使用的模板引擎的名字是？</h4><p><a href="http://www.smarty.net/" target="_blank" rel="external"><strong>Smarty:</strong></a>Smarty算是一种很老的PHP模板引擎了，它曾是我使用这门语言模板的最初选择。虽然它的更新已经不算频繁了，并且缺少新一代模板引擎所具有的部分特性，但是它仍然值得一看。</p><h4 id="13-对于大流量网站采用什么方法来解决访问量的问题"><a class="markdownIt-Anchor" href="#13-对于大流量网站采用什么方法来解决访问量的问题"></a> 13、对于大流量网站，采用什么方法来解决访问量的问题</h4><ul><li>确认服务器硬件是否能够支持当前的流量</li><li>数据库读写分离，优化数据表</li><li>程序功能规则，禁止外部的盗链</li><li>控制大文件的下载</li><li>使用不同主机分流主要流量</li></ul><h4 id="14-语句include和require的区别是什么为避免多次包含同一文件可以用语句代替他们"><a class="markdownIt-Anchor" href="#14-语句include和require的区别是什么为避免多次包含同一文件可以用语句代替他们"></a> 14、语句include和require的区别是什么？为避免多次包含同一文件，可以用(?)语句代替他们</h4><ul><li>require是无条件包含，也就是如果一个流程里加入require，无论条件成立与否都会先执行require，当文件不存在或者无法打开的时候，会提示错误，并且会终止程序执行</li><li>include有返回值，而require没有(可能因为如此require的速度比include快)，如果被包含的文件不存在的化，那么会提示一个错误，但是程序会继续执行下去</li></ul><p>注意:包含文件不存在或者语法错误的时候require是致命的，而include不是</p><ul><li>require_once表示了只包含一次，避免了重复包含</li></ul><h4 id="15-谈谈mvc的认识"><a class="markdownIt-Anchor" href="#15-谈谈mvc的认识"></a> 15、谈谈mvc的认识</h4><p>由模型、视图、控制器完成的应用程序，由模型发出要实现的功能到控制器，控制器接收组织功能传递给视图</p><h4 id="16-说明php中传值与传引用的区别并说明传值什么时候传引用"><a class="markdownIt-Anchor" href="#16-说明php中传值与传引用的区别并说明传值什么时候传引用"></a> 16、 说明php中传值与传引用的区别，并说明传值什么时候传引用？</h4><p>变量默认总是传值赋值，那也就是说，当将一个表达式的值赋予一个变量时，整个表达式的值被赋值到目标变量，这意味着：<strong>当一个变量的赋予另外一个变量时，改变其中一个变量的值，将不会影响到另外一个变量</strong></p><p>php也提供了另外一种方式给变量赋值：引用赋值。这意味着新的变量简单的__引用__*(换言之，成为了其别名或者指向)*<strong>了原始变量</strong>。改动的新的变量将影响到原始变量，反之亦然。使用引用赋值，简单地将一个&amp;符号加到将要赋值的变量前(源变量)</p><p>对象默认是传引用<br>对于较大是的数据，传引用比较好，这样可以节省内存的开销.</p><h4 id="17-isset-empty-is_null的区别"><a class="markdownIt-Anchor" href="#17-isset-empty-is_null的区别"></a> 17、isset、empty、is_null的区别</h4><p>isset 判断变量是否定义或者是否为空</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">变量存在返回ture，否则返回false</div><div class="line">变量定义不赋值返回false</div><div class="line">unset一个变量，返回false</div><div class="line">变量赋值为null，返回false</div></pre></td></tr></table></figure><p>empty：判断变量的值是否为空，能转换为false的都是空，为空返回true，反之返回false。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&quot;&quot;,0,&quot;0&quot;,NULL，FALSE都认为为空，返回true</div><div class="line">没有任何属性的对象都认为是空</div></pre></td></tr></table></figure><p>is_null：检测传入的值(值、变量、表达式)是否为null</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">定义了，但是赋值为Null</div><div class="line">定义了，但是没有赋值</div><div class="line">unset一个变量</div></pre></td></tr></table></figure><h4 id="18-前端调试的工具"><a class="markdownIt-Anchor" href="#18-前端调试的工具"></a> 18、前端调试的工具</h4><ul><li>Firefox的firebug</li><li>Chrome的开发工具</li><li>Emmet</li><li>JSON格式校验工具</li></ul><h4 id="19-简单描述mysql中索引主键唯一索引联合索引的区别对数据库的性能有什么影响从读写两方面新浪网技术部"><a class="markdownIt-Anchor" href="#19-简单描述mysql中索引主键唯一索引联合索引的区别对数据库的性能有什么影响从读写两方面新浪网技术部"></a> 19. 简单描述mysql中，索引，主键，唯一索引，联合索引的区别，对数据库的性能有什么影响（从读写两方面）（新浪网技术部）</h4><p>索引是一种特殊的文件(InnoDB数据表上的索引是表空间的一个组成部分)，它们包含着对数据表里所有记录的引用指针。<br>普通索引(由关键字KEY或INDEX定义的索引)的唯一任务是加快对数据的访问速度。<br>普通索引允许被索引的数据列包含重复的值。如果能确定某个数据列将只包含彼此各不相同的值，在为这个数据列创建索引的时候就应该用关键字UNIQUE把它定义为一个唯一索引。也就是说，唯一索引可以保证数据记录的唯一性。<br>主键，是一种特殊的唯一索引，在一张表中只能定义一个主键索引，主键用于唯一标识一条记录，使用关键字 PRIMARY KEY 来创建。<br>索引可以覆盖多个数据列，如像INDEX(columnA, columnB)索引，这就是联合索引。<br>索引可以极大的提高数据的查询速度，但是会降低插入、删除、更新表的速度，因为在执行这些写操作时，还要操作索引文件。</p><h4 id="20数据库中的事务是什么"><a class="markdownIt-Anchor" href="#20数据库中的事务是什么"></a> 20.数据库中的事务是什么?</h4><p>事务（transaction）是作为一个单元的一组有序的数据库操作。如果组中的所有操作都成功，则认为事务成功，即使只有一个操作失败，事务也不成功。如果所有操作完成，事务则提交，其修改将作用于所有其他数据库进程。如果一个操作失败，则事务将回滚，该事务所有操作的影响都将取消。ACID 四大特性,原子性、隔离性、一致性、持久性。</p><h4 id="21了解xss攻击吗如何防止"><a class="markdownIt-Anchor" href="#21了解xss攻击吗如何防止"></a> 21.了解XSS攻击吗？如何防止？</h4><p>XSS是跨站脚本攻击，首先是利用跨站脚本漏洞以一个特权模式去执行攻击者构造的脚本，然后利用不安全的Activex控件执行恶意的行为。<br>使用htmlspecialchars()函数对提交的内容进行过滤，使字符串里面的特殊符号实体化。</p><h4 id="22sql注入漏洞产生的原因如何防止"><a class="markdownIt-Anchor" href="#22sql注入漏洞产生的原因如何防止"></a> 22.SQL注入漏洞产生的原因？如何防止？</h4><p>SQL注入产生的原因：程序开发过程中不注意规范书写sql语句和对特殊字符进行过滤，导致客户端可以通过全局变量POST和GET提交一些sql语句正常执行。</p><h5 id="防止sql注入的方式"><a class="markdownIt-Anchor" href="#防止sql注入的方式"></a> 防止SQL注入的方式：</h5><ol><li>开启配置文件中的magic_quotes_gpc 和 magic_quotes_runtime设置</li><li>执行sql语句时使用addslashes进行sql语句转换</li><li>Sql语句书写尽量不要省略双引号和单引号。</li><li>过滤掉sql语句中的一些关键词：update、insert、delete、select、 * 。</li><li>提高数据库表和字段的命名技巧，对一些重要的字段根据程序的特点命名，取不易被猜到的。</li><li>Php配置文件中设置register_globals为off,关闭全局变量注册</li><li>控制错误信息，不要在浏览器上输出错误信息，将错误信息写到日志文件中。</li></ol><h4 id="23php网站的主要攻击方式有哪些"><a class="markdownIt-Anchor" href="#23php网站的主要攻击方式有哪些"></a> 23.PHP网站的主要攻击方式有哪些？</h4><ol><li>命令注入(Command Injection)</li><li>eval 注入(Eval Injection)</li><li>客户端脚本攻击(Script Insertion)</li><li>跨网站脚本攻击(Cross Site Scripting, XSS)</li><li>SQL 注入攻击(SQL injection)</li><li>跨网站请求伪造攻击(Cross Site Request<br>Forgeries, CSRF)</li><li>Session 会话劫持(Session Hijacking)</li><li>Session 固定攻击(Session Fixation)</li><li>HTTP 响应拆分攻击(HTTP Response Splitting)</li><li>文件上传漏洞(File Upload Attack)</li><li>目录穿越漏洞(Directory Traversal)</li><li>远程文件包含攻击(Remote Inclusion)</li><li>动态函数注入攻击(Dynamic Variable<br>Evaluation)</li><li>URL 攻击(URL attack)</li><li>表单提交欺骗攻击(Spoofed Form<br>Submissions)</li><li>HTTP 请求欺骗攻击(Spoofed HTTP Requests)</li></ol><h4 id="24-框架中什么是单一入口和多入口-单一入口的优缺点"><a class="markdownIt-Anchor" href="#24-框架中什么是单一入口和多入口-单一入口的优缺点"></a> 24、框架中什么是单一入口和多入口 ， 单一入口的优缺点？</h4><ol><li>多口就是通过访问不同的文件来完成用户请求。单一入口只 web 程序所有的请求都指向一个脚本文件的。</li><li>单一入口更容易控制权限，方便对 http 请求可以进行安全性检查。<br>缺点：URL 看起来不那么美观，特别是对搜索引擎来说不友好。</li></ol><h4 id="25-对于关系型数据库而言索引是相当重要的概念请回答有关索引的几个问题"><a class="markdownIt-Anchor" href="#25-对于关系型数据库而言索引是相当重要的概念请回答有关索引的几个问题"></a> 25、 对于关系型数据库而言，索引是相当重要的概念，请回答有关索引的几个问题：</h4><h5 id="a-索引的目的是什么"><a class="markdownIt-Anchor" href="#a-索引的目的是什么"></a> a)、索引的目的是什么？</h5><ol><li>快速访问数据表中的特定信息，提高检索速度</li><li>创建唯一性索引，保证数据库表中每一行数据的唯一性。</li><li>加速表和表之间的连接</li><li>使用分组和排序子句进行数据检索时，可以显著减少查询中分组和排序的时间</li></ol><h5 id="b-索引对数据库系统的负面影响是什么"><a class="markdownIt-Anchor" href="#b-索引对数据库系统的负面影响是什么"></a> b)、索引对数据库系统的负面影响是什么？</h5><p><strong>负面影响：</strong><br>创建索引和维护索引需要耗费时间，这个时间随着数据量的增加而增加；索引需要占用物理空间，不光是表需要占用数据空间，每个索引也需要占用物理空间；当对表进行增、删、改、的时候索引也要动态维护，这样就降低了数据的维护速度。</p><h5 id="c-为数据表建立索引的原则有哪些"><a class="markdownIt-Anchor" href="#c-为数据表建立索引的原则有哪些"></a> c)、为数据表建立索引的原则有哪些？</h5><ol><li>在最频繁使用的、用以缩小查询范围的字段上建立索引。</li><li>在频繁使用的、需要排序的字段上建立索引</li></ol><h5 id="d-什么情况下不宜建立索引"><a class="markdownIt-Anchor" href="#d-什么情况下不宜建立索引"></a> d)、 什么情况下不宜建立索引？</h5><ol><li>对于查询中很少涉及的列或者重复值比较多的列，不宜建立索引。</li><li>对于一些特殊的数据类型，不宜建立索引，比如文本字段（text）等。</li></ol><h4 id="26-简述在mysql数据库中myisam和innodb的区别"><a class="markdownIt-Anchor" href="#26-简述在mysql数据库中myisam和innodb的区别"></a> 26、 简述在MySQL数据库中MyISAM和InnoDB的区别</h4><p>区别于其他数据库的最重要的特点就是其插件式的表存储引擎。切记：存储引擎是基于表的，而不是数据库。</p><p>InnoDB与MyISAM的区别：</p><p><strong>InnoDB存储引擎:</strong> 主要面向OLTP(Online Transaction Processing，在线事务处理)方面的应用，是第一个完整支持ACID事务的存储引擎(BDB第一个支持事务的存储引擎，已经停止开发)。</p><p><strong>特点：</strong></p><ul><li>行锁设计、支持外键；</li><li>支持类似于Oracle风格的一致性非锁定读(即：默认情况下读取操作不会产生锁)；</li><li>InnoDB将数据放在一个逻辑的表空间中，由InnoDB自身进行管理。从MySQL4.1版本开始，可以将每个InnoDB存储引擎的表单独存放到一个独立的ibd文件中；</li><li>InnoDB通过使用MVCC(多版本并发控制：读不会阻塞写，写也不会阻塞读)来获得高并发性，并且实现了SQL标准的4种隔离级别(默认为REPEATABLE级别)；</li><li>InnoDB还提供了插入缓冲(insert buffer)、二次写(double write)、自适应哈希索引(adaptive hash index)、预读(read ahead)等高性能和高可用的功能；</li><li>InnoDB采用了聚集(clustered)的方式来存储表中的数据，每张标的存储都按主键的顺序存放(如果没有显式的在建表时指定主键，InnoDB会为每一行生成一个6字节的ROWID，并以此作为主键)；</li><li>InnoDB表会有三个隐藏字段：除了上面提到了6字节的DB_ROW_ID外，还有6字节的DB_TX_ID(事务ID)和7字节的DB_ROLL_PTR(指向对应回滚段的地址)。这个可以通过innodb monitor看到；</li></ul><p><strong>MyISAM存储引擎:</strong> 是MySQL官方提供的存储引擎，主要面向OLAP(Online Analytical Processing,在线分析处理)方面的应用。<br><strong>特点：</strong></p><ul><li>不支持事务，支持表所和全文索引。操作速度快；</li><li>MyISAM存储引擎表由MYD和MYI组成，MYD用来存放数据文件，MYI用来存放索引文件。MySQL数据库只缓存其索引文件，数据文件的缓存交给操作系统本身来完成；<br>MySQL5.0版本开始，MyISAM默认支持256T的单表数据；</li></ul><h4 id="27-解释mysql外连接-内连接与自连接的区别"><a class="markdownIt-Anchor" href="#27-解释mysql外连接-内连接与自连接的区别"></a> 27、 解释MySQL外连接、内连接与自连接的区别</h4><p><strong>先说什么是交叉连接:</strong> 交叉连接又叫笛卡尔积，它是指不使用任何条件，直接将一个表的所有记录和另一个表中的所有记录一一匹配。</p><p><strong>内连接</strong> 则是只有条件的交叉连接，根据某个条件筛选出符合条件的记录，不符合条件的记录不会出现在结果集中，即内连接只连接匹配的行。<br><strong>外连接</strong> 其结果集中不仅包含符合连接条件的行，而且还会包括左表、右表或两个表中<br>的所有数据行，这三种情况依次称之为左外连接，右外连接，和全外连接。</p><p>左外连接，也称左连接，左表为主表，左表中的所有记录都会出现在结果集中，对于那些在右表中并没有匹配的记录，仍然要显示，右边对应的那些字段值以NULL来填充。右外连接，也称右连接，右表为主表，右表中的所有记录都会出现在结果集中。左连接和右连接可以互换，MySQL目前还不支持全外连接。</p><h4 id="28-写出三种以上mysql数据库存储引擎的名称提示不区分大小写"><a class="markdownIt-Anchor" href="#28-写出三种以上mysql数据库存储引擎的名称提示不区分大小写"></a> 28、 写出三种以上MySQL数据库存储引擎的名称（提示：不区分大小写）</h4><p>MyISAM、InnoDB、BDB（BerkeleyDB）、Merge、Memory（Heap）、Example、Federated、<br>Archive、CSV、Blackhole、MaxDB 等等十几个引擎</p><h4 id="29-什么是面向对象主要特征是什么几大原则是什么"><a class="markdownIt-Anchor" href="#29-什么是面向对象主要特征是什么几大原则是什么"></a> 29、 什么是面向对象？主要特征是什么？几大原则是什么？</h4><p>面向对象是程序的一种设计模式，它利于提高程序的重用性，使程序机构更加清晰。 主要特征是：封装、继承、多态。<br>五大基本原则： 单一职责原则；开放封闭原则；替换原则； 依赖原则； 接口分离原则。</p><h4 id="30-什么是静态路由其特点是什么什么是动态路由其特点是什么"><a class="markdownIt-Anchor" href="#30-什么是静态路由其特点是什么什么是动态路由其特点是什么"></a> 30、什么是静态路由，其特点是什么?什么是动态路由，其特点是什么?</h4><p>参考答案：<br>静态路由是由系统管理员设计与构建的路由表规定的路由。适用于网关数量有限的场 合，且网络拓朴结构不经常变化的网络。其缺点是不能动态地适用网络状况的变化，当 网络状况变化后必须由网络管理员修改路由表。<br>动态路由是由路由选择协议而动态构建的，路由协议之间通过交换各自所拥有的路由信 息实时更新路由表的内容。动态路由可以自动学习网络的拓朴结构，并更新路由表。其 缺点是路由广播更新信息将占据大量的网络带宽。</p><h4 id="31-使用过-memcache-缓存吗如果使用过能够简单的描述一下它的工作原理吗"><a class="markdownIt-Anchor" href="#31-使用过-memcache-缓存吗如果使用过能够简单的描述一下它的工作原理吗"></a> 31、使用过 Memcache 缓存吗，如果使用过，能够简单的描述一下它的工作原理吗？</h4><p>Memcahce 是把所有的数据保存在内存当中，采用 hash 表的方式，每条数据由 key 和 value 组成，每个 key 是独一无二的，当要访问某个值的时候先按照找到值，然后返回结果。<br>Memcahce 采用 LRU 算法来逐渐把过期数据清除掉。</p><h4 id="32-列举流行的-ajax-框架说明-ajax-实现原理是什么及-json-在-ajax-中起什么作用"><a class="markdownIt-Anchor" href="#32-列举流行的-ajax-框架说明-ajax-实现原理是什么及-json-在-ajax-中起什么作用"></a> 32. 列举流行的 Ajax 框架？说明 Ajax 实现原理是什么及 json 在 Ajax 中起什么作用？</h4><p>流行的 Ajax 框架有 jQuery，Prototype，Dojo，MooTools。</p><p>Ajax 的工作原理是一个页面的指定位置可以加载另一个页面所有的输出内容，这样就实现了一个静态页面也能获取到数据库中的返回数据信息了。所以 Ajax 技术实现了一个静态网页在不刷新整个页面的情况下与服务器通信，减少了用户等待时间，同时也从而降低了网络流量，增强了客户体验的友好程度。<br>在使用 Ajax 时，涉及到数据传输，即将数据从服务器返回到客户端，服务器端和客户端分别使用不同的脚步语言来处理数据，这就需要一种通用的数据格式，XML 和 json 就是最常用的两种，而 json 比 XML 更简单。</p><h4 id="33-myql中的事务回滚机制概述"><a class="markdownIt-Anchor" href="#33-myql中的事务回滚机制概述"></a> 33、Myql中的事务回滚机制概述</h4><p>事务是用户定义的一个数据库操作序列，这些操作要么全做要么全不做，是一个不可分割的工作单位，事务回滚是指将该事务已经完成的对数据库的更新操作撤销。</p><p>要同时修改数据库中两个不同表时，如果它们不是一个事务的话，当第一个表修改完，可能第二个表修改过程中出现了异常而没能修改，此时就只有第二个表依旧是未修改之前的状态，而第一个表已经被修改完毕。而当你把它们设定为一个事务的时候，当第一个表修改完，第二表修改出现异常而没能修改，第一个表和第二个表都要回到未修改的状态，这就是所谓的事务回滚。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Oct 16 2017 16:21:04 GMT+0800 (CST) --&gt;&lt;h4 id=&quot;1-双引号和单引号的区别&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-双引号和单引号的区别&quot;&gt;&lt;/a&gt; 1、双引
      
    
    </summary>
    
    
      <category term="php" scheme="http://jimmy9876.top/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>php面试题-1[附答案]</title>
    <link href="http://jimmy9876.top/2017/05/30/php%E9%9D%A2%E8%AF%95%E9%A2%98-1-%E9%99%84%E7%AD%94%E6%A1%88/"/>
    <id>http://jimmy9876.top/2017/05/30/php面试题-1-附答案/</id>
    <published>2017-05-30T09:27:50.000Z</published>
    <updated>2017-10-16T07:16:33.212Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Oct 16 2017 16:21:04 GMT+0800 (CST) --><p>一份不错的php面试题,附答案</p><a id="more"></a><p>一、基础题</p><ol><li>写出如下程序的输出结果</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">    $str1 = null;</div><div class="line">    $str2 = false;</div><div class="line">    echo $str1==$str2 ? &apos;相等&apos; : &apos;不相等&apos;;</div><div class="line">    $str3 = &apos;&apos;;</div><div class="line">    $str4 = 0;</div><div class="line">    echo $str3==$str4 ? &apos;相等&apos; : &apos;不相等&apos;;</div><div class="line">    $str5 = 0;</div><div class="line">    $str6 = &apos;0&apos;;</div><div class="line">    echo $str5===$str6 ? &apos;相等&apos; : &apos;不相等&apos;;</div><div class="line">?&gt;</div></pre></td></tr></table></figure><ol start="2"><li>写出如下程序的输出结果</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">    $a1 = null;</div><div class="line">    $a2 = false;</div><div class="line">    $a3 = 0;</div><div class="line">    $a4 = &apos;&apos;;</div><div class="line">    $a5 = &apos;0&apos;;</div><div class="line">    $a6 = &apos;null&apos;;</div><div class="line">    $a7 = array();</div><div class="line">    $a8 = array(array());</div><div class="line">    echo empty($a1) ? &apos;true&apos; : &apos;false&apos;;</div><div class="line">    echo empty($a2) ? &apos;true&apos; : &apos;false&apos;;</div><div class="line">    echo empty($a3) ? &apos;true&apos; : &apos;false&apos;;</div><div class="line">    echo empty($a4) ? &apos;true&apos; : &apos;false&apos;;</div><div class="line">    echo empty($a5) ? &apos;true&apos; : &apos;false&apos;;</div><div class="line">    echo empty($a6) ? &apos;true&apos; : &apos;false&apos;;</div><div class="line">    echo empty($a7) ? &apos;true&apos; : &apos;false&apos;;</div><div class="line">    echo empty($a8) ? &apos;true&apos; : &apos;false&apos;;</div><div class="line">?&gt;</div></pre></td></tr></table></figure><ol start="3"><li>写出如下程序的输出结果</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">    $test = &apos;aaaaaa&apos;;</div><div class="line">    $abc = &amp; $test;</div><div class="line">    unset($test);</div><div class="line">    echo $abc;</div><div class="line">?&gt;</div></pre></td></tr></table></figure><ol start="4"><li>写出如下程序的输出结果</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">    $count = 5;</div><div class="line">    function get_count()&#123;</div><div class="line">        static $count = 0;</div><div class="line">        return $count++;</div><div class="line">    &#125;</div><div class="line">    echo $count;</div><div class="line">    ++$count;</div><div class="line">    echo get_count();</div><div class="line">    echo get_count();</div><div class="line">?&gt;</div></pre></td></tr></table></figure><ol start="5"><li>写出如下程序的输出结果</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">    $GLOBALS[&apos;var1&apos;] = 5;</div><div class="line">    $var2 = 1;</div><div class="line">    function get_value()&#123;</div><div class="line">        global $var2;</div><div class="line">        $var1 = 0;</div><div class="line">        return $var2++;</div><div class="line">    &#125;</div><div class="line">    get_value();</div><div class="line">    echo $var1;</div><div class="line">    echo $var2;</div><div class="line">?&gt;</div></pre></td></tr></table></figure><ol start="6"><li>写出如下程序的输出结果</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">    function get_arr($arr)&#123;</div><div class="line">        unset($arr[0]);</div><div class="line">    &#125;</div><div class="line">    $arr1 = array(1, 2);</div><div class="line">    $arr2 = array(1, 2);</div><div class="line">    get_arr(&amp;$arr1);</div><div class="line">    get_arr($arr2);</div><div class="line">    echo count($arr1);</div><div class="line">    echo count($arr2);</div><div class="line">?&gt;</div></pre></td></tr></table></figure><ol start="7"><li>使用五种以上方式获取一个文件的扩展名</li></ol><p>要求：dir/upload.image.jpg，找出 .jpg 或者 jpg ，<br>必须使用PHP自带的处理函数进行处理，方法不能明显重复，可以封装成函数，比如 get_ext1(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mi>i</mi><mi>l</mi><msub><mi>e</mi><mi>n</mi></msub><mi>a</mi><mi>m</mi><mi>e</mi><mo>)</mo><mo separator="true">,</mo><mi>g</mi><mi>e</mi><msub><mi>t</mi><mi>e</mi></msub><mi>x</mi><mi>t</mi><mn>2</mn><mo>(</mo></mrow><annotation encoding="application/x-tex">file_name), get_ext2(</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:.75em"></span><span class="strut bottom" style="height:1em;vertical-align:-.25em"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:.10764em">f</span><span class="mord mathit">i</span><span class="mord mathit" style="margin-right:.01968em">l</span><span class="mord"><span class="mord mathit">e</span><span class="vlist"><span style="top:.15em;margin-right:.05em;margin-left:0"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">n</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span>​</span></span></span><span class="mord mathit">a</span><span class="mord mathit">m</span><span class="mord mathit">e</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mord mathit" style="margin-right:.03588em">g</span><span class="mord mathit">e</span><span class="mord"><span class="mord mathit">t</span><span class="vlist"><span style="top:.15em;margin-right:.05em;margin-left:0"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">e</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0">​</span></span>​</span></span></span><span class="mord mathit">x</span><span class="mord mathit">t</span><span class="mord mathrm">2</span><span class="mopen">(</span></span></span></span>file_name)<br>二、算法题</p><ol><li>使用PHP描述冒泡排序和快速排序算法，对象可以是一个数组</li><li>使用PHP描述顺序查找和二分查找（也叫做折半查找）算法，顺序查找必须考虑效率，对象可以是一个有序数组</li><li>写一个二维数组排序算法函数，能够具有通用性，可以调用php内置函数</li></ol><p>【答案】<br>（以下答案不一定是最好的，只是一个简单的参考）<br>一、基础题</p><ol><li>相等 相等 不相等</li><li>true true true true true false true false</li><li>aaaaaa 参考: <a href="http://my.oschina.net/banbo/blog/303306" target="_blank" rel="external">http://my.oschina.net/banbo/blog/303306</a> 里面的结论二</li><li>5 0 1</li><li>5 2</li><li>1 2</li><li>使用五种以上方式获取一个文件的扩展名</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">function get_ext1($file_name)&#123;</div><div class="line">    return strrchr($file_name, &apos;.&apos;);</div><div class="line">&#125;</div><div class="line">function get_ext2($file_name)&#123;</div><div class="line">    return substr($file_name, strrpos($file_name, &apos;.&apos;));</div><div class="line">&#125;</div><div class="line">function get_ext3($file_name)&#123;</div><div class="line">    return array_pop(explode(&apos;.&apos;, $file_name));</div><div class="line">&#125;</div><div class="line">function get_ext4($file_name)&#123;</div><div class="line">    return pathinfo($file_name, PATHINFO_EXTENSION);</div><div class="line">&#125;</div><div class="line">function get_ext5($file_name)&#123;</div><div class="line">    return strrev(substr(strrev($file_name), 0, strpos(strrev($file_name), &apos;.&apos;)));</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>二、算法题</p><ol><li>使用PHP描述冒泡排序和快速排序算法，对象可以是一个数组</li></ol><p>冒泡排序（数组排序）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">function bubble_sort($array)&#123;</div><div class="line">    $count = count($array);</div><div class="line">    if ($count &lt;= 0) return false;</div><div class="line">    for($i=0; $i&lt;$count; $i++)&#123;</div><div class="line">        for($j=$i; $j&lt;$count-1; $j++)&#123;</div><div class="line">            if ($array[$i] &gt; $array[$j])&#123;</div><div class="line">                $tmp = $array[$i];</div><div class="line">                $array[$i] = $array[$j];</div><div class="line">                $array[$j] = $tmp;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return $array;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>快速排序（数组排序）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">function quick_sort($array) &#123;</div><div class="line">    if (count($array) &lt;= 1) return $array;</div><div class="line">    $key = $array[0];</div><div class="line">    $left_arr = array();</div><div class="line">    $right_arr = array();</div><div class="line">    for ($i=1; $i&lt;count($array); $i++)&#123;</div><div class="line">        if ($array[$i] &lt;= $key)</div><div class="line">            $left_arr[] = $array[$i];</div><div class="line">        else</div><div class="line">            $right_arr[] = $array[$i];</div><div class="line">    &#125;</div><div class="line">    $left_arr = quick_sort($left_arr);</div><div class="line">    $right_arr = quick_sort($right_arr);</div><div class="line">    return array_merge($left_arr, array($key), $right_arr);</div><div class="line">&#125;</div></pre></td></tr></table></figure><ol start="2"><li>使用PHP描述顺序查找和二分查找（也叫做折半查找）算法，顺序查找必须考虑效率，对象可以是一个有序数组</li></ol><p>二分查找（数组里查找某个元素）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">function bin_sch($array, $low, $high, $k)&#123;</div><div class="line">    if ($low &lt;= $high)&#123;</div><div class="line">    $mid = intval(($low+$high)/2);</div><div class="line">    if ($array[$mid] == $k)&#123;</div><div class="line">    return $mid;</div><div class="line">    &#125;elseif ($k &lt; $array[$mid])&#123;</div><div class="line">    return bin_sch($array, $low, $mid-1, $k);</div><div class="line">    &#125;else&#123;</div><div class="line">    return bin_sch($array, $mid+1, $high, $k);</div><div class="line">    &#125;</div><div class="line">    &#125;</div><div class="line">    return -1;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>顺序查找（数组里查找某个元素）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">function seq_sch($array, $n, $k)&#123;</div><div class="line">    $array[$n] = $k;</div><div class="line">    for($i=0; $i&lt;$n; $i++)&#123;</div><div class="line">        if($array[$i]==$k)&#123;</div><div class="line">            break;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    if ($i&lt;$n)&#123;</div><div class="line">        return $i;</div><div class="line">    &#125;else&#123;</div><div class="line">        return -1;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ol start="3"><li>写一个二维数组排序算法函数，能够具有通用性，可以调用php内置函数</li></ol><p>二维数组排序， arr是数据，keys是排序的健值，$order是排序规则，1是升序，0是降序</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">array_sort</span><span class="params">($arr, $keys, $order=<span class="number">0</span>)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!is_array($arr)) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">    $keysvalue = <span class="keyword">array</span>();</div><div class="line">    <span class="keyword">foreach</span>($arr <span class="keyword">as</span> $key =&gt; $val) &#123;</div><div class="line">        $keysvalue[$key] = $val[$keys];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>($order == <span class="number">0</span>)&#123;</div><div class="line">        asort($keysvalue);</div><div class="line">    &#125;<span class="keyword">else</span> &#123;</div><div class="line">        arsort($keysvalue);</div><div class="line">    &#125;</div><div class="line">    reset($keysvalue);</div><div class="line">    <span class="keyword">foreach</span>($keysvalue <span class="keyword">as</span> $key =&gt; $vals) &#123;</div><div class="line">        $keysort[$key] = $key;</div><div class="line">    &#125;</div><div class="line">    $new_array = <span class="keyword">array</span>();</div><div class="line">    <span class="keyword">foreach</span>($keysort <span class="keyword">as</span> $key =&gt; $val) &#123;</div><div class="line">        $new_array[$key] = $arr[$val];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> $new_array;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><a href="https://my.oschina.net/banbo/blog/303308" target="_blank" rel="external">原文地址</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Oct 16 2017 16:21:04 GMT+0800 (CST) --&gt;&lt;p&gt;一份不错的php面试题,附答案&lt;/p&gt;
    
    </summary>
    
    
      <category term="php" scheme="http://jimmy9876.top/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+Next主题个性化配置-1</title>
    <link href="http://jimmy9876.top/2017/05/30/Hexo-Next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE-1/"/>
    <id>http://jimmy9876.top/2017/05/30/Hexo-Next主题个性化配置-1/</id>
    <published>2017-05-30T02:53:55.000Z</published>
    <updated>2017-10-16T07:16:33.210Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Oct 16 2017 16:21:04 GMT+0800 (CST) --><blockquote><p>折腾了next这么久，就写一篇博客来记录一下，以作备忘，同时也给后来人一些借鉴</p></blockquote><a id="more"></a><h1 id="next主题安装使用"><a class="markdownIt-Anchor" href="#next主题安装使用"></a> NexT主题安装使用</h1><h2 id="本地环境"><a class="markdownIt-Anchor" href="#本地环境"></a> 本地环境</h2><p>自行安装 <code>git</code> 和 <code>Node.js</code> 不会的可百度，安装方法一堆。</p><h2 id="安装hexo"><a class="markdownIt-Anchor" href="#安装hexo"></a> 安装Hexo</h2><p><code>Git</code> 和 <code>Node.js</code> 都安装好后,首先创建一个用于存放博客文件的文件夹，如 <code>blog</code>，然后进入 <code>blog</code> 文件夹，下面开始安装并使用 <code>Hexo</code>。<br>右键选择 <code>Git Bash Here</code>，弹出 <code>Git Bash</code> 窗口；执行命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ npm install -g hexo-cli</div><div class="line">$ hexo init</div></pre></td></tr></table></figure><p>安装完成后，指定文件夹的目录如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">├── _config.yml</div><div class="line">├── package.json</div><div class="line">├── scaffolds</div><div class="line">├── source</div><div class="line">|   ├── _drafts</div><div class="line">|   └── _posts</div><div class="line">└── themes</div></pre></td></tr></table></figure><p>其中 <code>_config.yml</code> 文件用于存放网站的配置信息，你可以在此配置大部分的参数； <code>scaffolds</code> 是存放模板的文件夹，当新建文章时，Hexo 会根据 <code>scaffold</code> 来建立文件； <code>source</code> 是资源文件夹，用于存放用户资源， <code>themes</code>是主题文件夹，存放博客主题， <code>Hexo</code> 会根据主题来生成静态页面。</p><p>在 <code>Git Bash</code> 终端执行命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo g</div><div class="line">$ hexo s</div></pre></td></tr></table></figure><p>Hexo将 <code>source</code> 文件夹中的Markdown 和 HTML 文件会被解析并放到 <code>public</code> 文件夹中， <code>public</code> 文件夹用于存放静态博客文件，相当于网站根目录。<br>至此博客雏形基本完成，在浏览器中访问 <code>http://localhost:4000/</code> ，就可以访问本地博客了。</p><h2 id="使用next主题"><a class="markdownIt-Anchor" href="#使用next主题"></a> 使用NexT主题</h2><p>在 <code>Git Bash</code> 终端执行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git clone https://github.com/iissnan/hexo-theme-next themes/next</div></pre></td></tr></table></figure><p>打开站点配置文件 <code>_config.yml</code>，找到 <code>theme</code> 字段，并将其值更改为 <code>next</code> 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">theme: next</div></pre></td></tr></table></figure><p>NexT主题是我用过的唯一的一款Hexo主题，界面简约，功能齐全且多样，响应式设计，电脑，手机访问效果很好。</p><p>在 <code>Git Bash</code> 终端执行命令 <code>hexo s</code> ，在浏览器中访问 <code>http://localhost:4000/</code> ，可以看到默认的NexT-Muse主题。</p><p>我喜欢双栏的故使用 <code>NexT.Pisces</code> 主题，修改主题配置文件 <code>_config.yml</code>的 <code>Schemes</code> 字段的值为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scheme: Pisces</div></pre></td></tr></table></figure><h1 id="next主题宽度调节"><a class="markdownIt-Anchor" href="#next主题宽度调节"></a> Next主题宽度调节</h1><p>现在一般都用宽屏显示器，博客页面两侧留白太多，调整一下宽度。<br>打开 <code>\themes\next\source\css\_common\components\post\post-expand.styl</code> 文件，找到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@media (max-width: 767px)</div></pre></td></tr></table></figure><p>改为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@media (max-width: 1080px)</div></pre></td></tr></table></figure><p>打开 <code>\themes\next\source\css\ _variables\base.styl</code> 文件，找到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$main-desktop                   = 960px</div><div class="line">$main-desktop-large             = 1200px</div><div class="line">$content-desktop                = 700px</div></pre></td></tr></table></figure><p>修改 <code>$main-desktop</code> 和 <code>$content-desktop</code> 的数值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$main-desktop                   = 1080px</div><div class="line">$main-desktop-large             = 1200px</div><div class="line">$content-desktop                = 810px</div></pre></td></tr></table></figure><p><code>Next.Mist</code> 主题的文章宽度至此改完了。如果你用的是 <code>Next.Pisces</code>，还需要继续修改。<br>打开 <code>\themes\next\source\css\_schemes\Pisces\_layout.styl</code> 文件，将第 <code>4</code> 行的 <code>width改为1080px</code> ，修改后如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.header &#123;</div><div class="line">  position: relative;</div><div class="line">  margin: 0 auto;</div><div class="line">  width: 1080px;</div></pre></td></tr></table></figure><p>记录一下我常用的细节改动，参考了许多博友的设置，并不是我的原创。参考网站，会在文章最底部列出，以示谢意。</p><h1 id="修改文章内链接文本样式"><a class="markdownIt-Anchor" href="#修改文章内链接文本样式"></a> 修改文章内链接文本样式</h1><p>将链接文本设置为蓝色，鼠标划过时文字颜色加深，并显示下划线。<br>修改文件 <code>themes\next\source\css\_common\components\post\post.styl</code> ，添加如下css样式，：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// 文章内链接文本样式</div><div class="line">.post-body p a&#123;</div><div class="line">  color: #0593d3;</div><div class="line">  border-bottom: none;</div><div class="line">  border-bottom: 1px solid #0593d3;</div><div class="line">  &amp;:hover &#123;</div><div class="line">    color: #fc6423;</div><div class="line">    border-bottom: none;</div><div class="line">    border-bottom: 1px solid #fc6423;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>选择 <code>.post-body</code> 是为了不影响标题，选择 <code>p</code> 是为了不影响首页“阅读全文”的显示样式。</p><h1 id="文章底部的那个带号的标签"><a class="markdownIt-Anchor" href="#文章底部的那个带号的标签"></a> 文章底部的那个带#号的标签</h1><p>文章底部的那个带#号的标签，比如#NexT，可以把#换成图标吗，怎么设置?<br>修改模板 <code>layout/_macro/post.swig</code>，搜索 <code>rel=&quot;tag&quot;&gt;#</code>，将 # 换成 <code>&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;</code></p><h1 id="首页展示文章动画效果和图片放大镜效果关闭哪改"><a class="markdownIt-Anchor" href="#首页展示文章动画效果和图片放大镜效果关闭哪改"></a> 首页展示文章动画效果和图片放大镜效果关闭哪改？</h1><p>文章动画效果关闭：主题配置里 <code>Motion:</code> 改为 <code>false</code></p><p>关闭图片放大镜效果: 主题配置里 <code>fancybox:</code> 改为 <code>false</code></p><h1 id="hexo背景动态效果和心心"><a class="markdownIt-Anchor" href="#hexo背景动态效果和心心"></a> hexo背景动态效果和心心</h1><p>博客背景动态效果图和点击小红心效果的相关设置。<br>把 <code>js</code> 文件 <code>love.js</code> 和 <code>particle.js</code> 放在 <code>\themes\next\source\js\src</code> 文件目录下<br>更新 <code>\themes\next\layout\_layout.swig</code> 文件，在末尾（在前面引用会出现找不到的bug）添加以下 <code>js</code> 引入代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 背景动画 --&gt;</div><div class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/particle.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;!-- 页面点击小红心 --&gt;</div><div class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/love.js&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure><p>想设置动画线条颜色可改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script type=&quot;text/javascript&quot; color=&quot;255,0,0&quot; opacity=&quot;0.3&quot; count=&quot;99&quot; src=&quot;particle.js&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure><p>就能显示红色。或者用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/particles.js&quot; count=&quot;50&quot; zindex=&quot;-2&quot; opacity=&quot;1&quot; color=&quot;0,104,183&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure><p>两个JS下载为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">http://7u2ss1.com1.z0.glb.clouddn.com/love.js</div><div class="line">http://7u2ss1.com1.z0.glb.clouddn.com/particle.js</div></pre></td></tr></table></figure><h1 id="hexo-next主题首页title的优化"><a class="markdownIt-Anchor" href="#hexo-next主题首页title的优化"></a> hexo NexT主题首页title的优化</h1><p>更改 <code>index.swig</code> 文件，文件路径是 <code>your-hexo-site\themes\next\layout</code> ，将下面代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% block title %&#125; &#123;&#123; config.title &#125;&#125; &#123;% endblock %&#125;</div></pre></td></tr></table></figure><p>改成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% block title %&#125; &#123;&#123; config.title &#125;&#125; - &#123;&#123; theme.description &#125;&#125; &#123;% endblock %&#125;</div></pre></td></tr></table></figure><p>这时候你的首页标题会更符合网站名称 - 网站描述这习惯。<br>进阶，做了 <code>seo</code> 优化，把关键词也显示在 <code>Title</code> 标题里，可改成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% block title %&#125; &#123;&#123; theme.keywords &#125;&#125; - &#123;&#123; config.title &#125;&#125; - &#123;&#123; theme.description &#125;&#125; &#123;% endblock %&#125;</div></pre></td></tr></table></figure><p>**注意：**别堆砌关键字，整个标题一般不超过 <code>80</code> 个字符，可以通过chinaz的seo综合查询检查。</p><h1 id="每篇文章末尾统一添加本文结束标记"><a class="markdownIt-Anchor" href="#每篇文章末尾统一添加本文结束标记"></a> 每篇文章末尾统一添加“本文结束”标记</h1><h2 id="新建-passage-end-tagswig-文件"><a class="markdownIt-Anchor" href="#新建-passage-end-tagswig-文件"></a> 新建 <code>passage-end-tag.swig</code> 文件</h2><p>在路径 <code>\themes\next\layout\_macro</code> 中添加 <code>passage-end-tag.swig</code> 文件，其内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;div&gt;</div><div class="line">    &#123;% if not is_index %&#125;</div><div class="line">        &lt;div style=&quot;text-align:center;color: #ccc;font-size:14px;&quot;&gt;------本文结束&lt;i class=&quot;fa fa-paw&quot;&gt;&lt;/i&gt;感谢阅读------&lt;/div&gt;</div><div class="line">    &#123;% endif %&#125;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure><h2 id="修改-postswig-文件"><a class="markdownIt-Anchor" href="#修改-postswig-文件"></a> 修改 post.swig 文件</h2><p>在 <code>\themes\next\layout\_macro\post.swig</code> 中， <code>post-body</code> 之后， <code>post-footer</code> 之前添加如下代码（post-footer之前两个DIV）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;div&gt;</div><div class="line">  &#123;% if not is_index %&#125;</div><div class="line">    &#123;% include &apos;passage-end-tag.swig&apos; %&#125;</div><div class="line">  &#123;% endif %&#125;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure><h2 id="在主题配置文件中添加字段"><a class="markdownIt-Anchor" href="#在主题配置文件中添加字段"></a> 在主题配置文件中添加字段</h2><p>在<strong>主题配置文件</strong> <code>_config.yml</code> 中添加以下字段开启此功能：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># 文章末尾添加“本文结束”标记</div><div class="line">passage_end_tag:</div><div class="line">  enabled: true</div></pre></td></tr></table></figure><p>完成以上设置之后，在每篇文章之后都会添加“本文结束”标记。</p><h1 id="增加high一下功能"><a class="markdownIt-Anchor" href="#增加high一下功能"></a> 增加HIGH一下功能</h1><p>在 <code>themes\next\layout\_macro</code> 目录下增加 <code>high.swig</code> 文件，我已改为歌曲循环和多次点击不重复！<br>地址为:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://7u2ss1.com1.z0.glb.clouddn.com/high-xunhuan.swig</div></pre></td></tr></table></figure><p>打开这个地址，复制全部内容，在你本地新建<code>high.swig</code> 文件。<br>打开\themes\next\layout_macro\sidebar.swig文件，打开，在</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;a href=&quot;&#123;&#123; url_for(theme.rss) &#125;&#125;&quot; target=&quot;_blank&quot; rel=&quot;alternate&quot;&gt;</div><div class="line">    &lt;i class=&quot;fa fa-rss&quot;&gt;&lt;/i&gt;</div><div class="line">    RSS</div><div class="line">&lt;/a&gt;</div></pre></td></tr></table></figure><p>后边加入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% include &apos;high.swig&apos; %&#125;</div></pre></td></tr></table></figure><p>如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;% if theme.rss %&#125;</div><div class="line">          &lt;div class=&quot;feed-link motion-element&quot;&gt;</div><div class="line">            &lt;a href=&quot;&#123;&#123; url_for(theme.rss) &#125;&#125;&quot; rel=&quot;alternate&quot;&gt;</div><div class="line">              &lt;i class=&quot;fa fa-rss&quot;&gt;&lt;/i&gt;</div><div class="line">              RSS</div><div class="line">            &lt;/a&gt;</div><div class="line">              &#123;% include &apos;high.swig&apos; %&#125;</div><div class="line">          &lt;/div&gt;</div><div class="line">        &#123;% endif %&#125;</div></pre></td></tr></table></figure><p>接着在主题配置文件 <code>_config.yml</code> ，加入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">highqilai: </div><div class="line">  enabled: true</div></pre></td></tr></table></figure><p>然后打开自定义CSS： <code>\themes\next\source\css\_custom\custom.styl</code> 加入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">.feed-link a&#123;display: inline-block;&#125;</div></pre></td></tr></table></figure><p>保存，<code>hexo clean</code> ， <code>hexo g</code> , <code>hexo s</code> 查看效果！<br>主页 <code>High</code> 起来，摇动。改动方法！<br><code>themes\next\layout\_layout.swig</code><br>前添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;link href=&quot;http://7u2ss1.com1.z0.glb.clouddn.com/harlem-shake-style.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;</div></pre></td></tr></table></figure><p>地址改为你自己的CSS。失效了不怪！<br><em>如果只是想当播放器听歌的话改 high.swig 文件内容为：</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line">&lt;a title=&quot;收藏到书签，偶尔High一下^_^&quot; rel=&quot;alternate&quot; class=&quot;mw-harlem_shake_slow wobble shake&quot; href=&apos;javascript:(</div><div class="line">    /*</div><div class="line">     * Copyright (C) 2015 Rocko (rocko.xyz) &lt;rocko.zxp@gmail.com&gt;</div><div class="line">     *</div><div class="line">     * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</div><div class="line">     * you may not use this file except in compliance with the License.</div><div class="line">     * You may obtain a copy of the License at</div><div class="line">     *</div><div class="line">     *      http://www.apache.org/licenses/LICENSE-2.0</div><div class="line">     *</div><div class="line">     * Unless required by applicable law or agreed to in writing, software</div><div class="line">     * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</div><div class="line">     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</div><div class="line">     * See the License for the specific language governing permissions and</div><div class="line">     * limitations under the License.</div><div class="line">     */</div><div class="line">    function go() &#123;</div><div class="line">    </div><div class="line">      var songs = [</div><div class="line">          &quot;http://7u2ss1.com1.z0.glb.clouddn.com/%E9%AB%98%E6%A2%A8%E5%BA%B7%E6%B2%BB%20-%20%E5%AD%A4%E7%8B%AC.mp3&quot;, </div><div class="line">          &quot;http://7u2ss1.com1.z0.glb.clouddn.com/one%20by%20one.mp3&quot;,</div><div class="line">          &quot;http://7u2ss1.com1.z0.glb.clouddn.com/Enya%20-%20Only%20Time.mp3&quot;,</div><div class="line">          &quot;http://7u2ss1.com1.z0.glb.clouddn.com/Enya%20-%20May%20It%20Be.mp3&quot;,        </div><div class="line">          &quot;......&quot;</div><div class="line">      ];</div><div class="line"> </div><div class="line">      function S() &#123;</div><div class="line">          var e = document.getElementById(&quot;audio_element_id&quot;);</div><div class="line">          if(e != null)&#123;</div><div class="line">              var index = parseInt(e.getAttribute(&quot;curSongIndex&quot;));</div><div class="line">              if(index &gt; songs.length - 2) &#123;</div><div class="line">                  index = 0;</div><div class="line">              &#125; else &#123;</div><div class="line">                  index++;</div><div class="line">              &#125;</div><div class="line">              e.setAttribute(&quot;curSongIndex&quot;, index);</div><div class="line">          &#125;</div><div class="line">          e.src = i;</div><div class="line">          e.play()</div><div class="line">      &#125;</div><div class="line">      function initAudioEle() &#123;</div><div class="line">          var e = document.getElementById(&quot;audio_element_id&quot;);</div><div class="line">          if(e === null)&#123;</div><div class="line">            e = document.createElement(&quot;audio&quot;);</div><div class="line">            e.setAttribute(&quot;curSongIndex&quot;, 0);</div><div class="line">            e.id = &quot;audio_element_id&quot;;</div><div class="line">            e.loop = false;</div><div class="line">            e.bgcolor = 0;</div><div class="line">            e.innerHTML = &quot; &lt;p&gt;If you are reading this, it is because your browser does not support the audio element. We recommend that you get a new browser.&lt;/p&gt; &lt;p&gt;&quot;;</div><div class="line">            document.body.appendChild(e);</div><div class="line">            e.addEventListener(&quot;ended&quot;, function() &#123;</div><div class="line">              go();</div><div class="line">            &#125;, true);</div><div class="line">          &#125;        </div><div class="line">      &#125;</div><div class="line">    </div><div class="line">      initAudioEle();</div><div class="line">      var curSongIndex = parseInt(document.getElementById(&quot;audio_element_id&quot;).getAttribute(&quot;curSongIndex&quot;));</div><div class="line">      var i = songs[curSongIndex];</div><div class="line">      S();</div><div class="line">    &#125;)()&apos;&gt;</div><div class="line">    &lt;i class=&quot;fa fa-music&quot;&gt;&lt;/i&gt; 听音乐&lt;/a&gt;</div></pre></td></tr></table></figure><h1 id="作者头像变成圆形"><a class="markdownIt-Anchor" href="#作者头像变成圆形"></a> 作者头像变成圆形</h1><p>打开自定义CSS： <code>\themes\next\source\css\_custom\custom.styl</code> 加入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">.site-author-image &#123;</div><div class="line">  border-radius: 100%;</div><div class="line">  padding: 2px;</div><div class="line">  border: 2px dashed #fff;</div><div class="line">  animation: cycle 2s 0.5s forwards;</div><div class="line">  transition: border-radius 2s;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>博主名字号大小,也在 <code>custom.styl</code> 文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.site-author-name &#123;</div><div class="line">  font-size: 16px;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="动态title改动"><a class="markdownIt-Anchor" href="#动态title改动"></a> 动态title改动</h1><p>先看代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;!--崩溃欺骗--&gt;</div><div class="line">var OriginTitile = document.title;</div><div class="line"> var titleTime;</div><div class="line"> document.addEventListener(&apos;visibilitychange&apos;, function () &#123;</div><div class="line">     if (document.hidden) &#123;</div><div class="line">         $(&apos;[rel=&quot;icon&quot;]&apos;).attr(&apos;href&apos;, &quot;/img/TEP.ico&quot;);</div><div class="line">         document.title = &apos;╭(°A°`)╮ 页面崩溃&apos;;</div><div class="line">         clearTimeout(titleTime);</div><div class="line">     &#125;</div><div class="line">     else &#123;</div><div class="line">         $(&apos;[rel=&quot;icon&quot;]&apos;).attr(&apos;href&apos;, &quot;/favicon.ico&quot;);</div><div class="line">         document.title = &apos;(ฅ&gt;ω&lt;*ฅ) 噫又好了~&apos; + OriginTitile;</div><div class="line">         titleTime = setTimeout(function () &#123;</div><div class="line">             document.title = OriginTitile;</div><div class="line">         &#125;, 2000);</div><div class="line">     &#125;</div><div class="line"> &#125;);</div></pre></td></tr></table></figure><p>做为JS引用时，可以直接将上面代码保存为XXX.js，然后引用。在 <code>\themes\next\layout\_layout.swig</code> 最下边引用加入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;!--崩溃欺骗--&gt;</div><div class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/duoshuoshuo.js&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure><h1 id="hexo站点添加sitemap网站地图"><a class="markdownIt-Anchor" href="#hexo站点添加sitemap网站地图"></a> hexo站点添加sitemap网站地图</h1><h2 id="安装hexo的sitemap网站地图生成插件"><a class="markdownIt-Anchor" href="#安装hexo的sitemap网站地图生成插件"></a> 安装hexo的sitemap网站地图生成插件</h2><p>进入 <code>hexo</code> 根目录，打开 <code>git</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install hexo-generator-sitemap --save</div><div class="line">npm install hexo-generator-baidu-sitemap --save</div></pre></td></tr></table></figure><h2 id="在你的hexo站点的_configyml添加下面的代码注意缩进格式"><a class="markdownIt-Anchor" href="#在你的hexo站点的_configyml添加下面的代码注意缩进格式"></a> 在你的hexo站点的_config.yml添加下面的代码，注意缩进格式！</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># hexo sitemap网站地图</div><div class="line">sitemap:</div><div class="line">  path: sitemap.xml</div><div class="line">baidusitemap:</div><div class="line">  path: baidusitemap.xml</div></pre></td></tr></table></figure><h3 id="配置成功后"><a class="markdownIt-Anchor" href="#配置成功后"></a> 配置成功后</h3><p>hexo编译时会在hexo站点根目录生成sitemap.xml和baidusitemap.xml<br>其中sitemap.xml适合提交给谷歌搜素引擎，baidusitemap.xml适合提交百度搜索引擎。<br>其次，在robots.txt中添加下面的一段代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Sitemap: http://你的域名/sitemap.xml</div><div class="line">Sitemap: http://你的域名/baidusitemap.xml</div></pre></td></tr></table></figure><p>请自行改成自己的网站。</p><h1 id="给-github-添加-readme"><a class="markdownIt-Anchor" href="#给-github-添加-readme"></a> 给 Github 添加 README</h1><p>默认情况下， <code>Github</code> 中每一个项目，我们希望有一份 <code>README.md</code> 的文件来作为项目的说明，但是我们在项目根目录下的 <code>blog\source</code> 目录下创建一份 <code>README.md</code> 文件，写好说明介绍，部署的时候，这个 <code>README.md</code> 会被 <code>hexo</code> 解析掉，而不会被解析到 <code>Github</code> 中去的。<br>正确的解决方法其实很简单：<br>把 <code>README.md</code> 文件的后缀名改成 <code>MDOWN</code> 然后扔到 <code>blog/source</code> 文件夹下即可，这样 <code>hexo</code> 不会解析， <code>Github</code> 也会将其作为MD文件解析。</p><h1 id="代码块自定义样式内的"><a class="markdownIt-Anchor" href="#代码块自定义样式内的"></a> 代码块自定义样式``内的</h1><p>打开自定义CSS： <code>\themes\next\source\css\_custom\custom.styl</code> 加入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">// 代码块自定义样式``内的</div><div class="line">code &#123;</div><div class="line">    color: #fc6423;</div><div class="line">    background: #fbf7f8;</div><div class="line">    margin: 2px;</div><div class="line">&#125;</div><div class="line">// 大代码块的自定义样式</div><div class="line">.highlight, pre &#123;</div><div class="line">    margin: 5px 0;</div><div class="line">    padding: 5px;</div><div class="line">    border-radius: 3px;</div><div class="line">&#125;</div><div class="line">.highlight, code, pre &#123;</div><div class="line">    border: 1px solid #d6d6d6;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="博客部署的message"><a class="markdownIt-Anchor" href="#博客部署的message"></a> 博客部署的message</h1><p><code>\node_modules\hexo-deployer-git\lib\deployer.js</code> 文件末尾找到这一句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Site updated: &#123;&#123; now(&apos;YYYY-MM-DD HH:mm:ss&apos;) &#125;&#125;.</div></pre></td></tr></table></figure><p>改得个性化一点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">这个勤奋的家伙又更新了: &#123;&#123; now(\&apos;YYYY-MM-DD HH:mm:ss\&apos;) &#125;&#125;.</div></pre></td></tr></table></figure><h1 id="博文置顶"><a class="markdownIt-Anchor" href="#博文置顶"></a> 博文置顶</h1><h2 id="修改-hexo-generator-index-插件"><a class="markdownIt-Anchor" href="#修改-hexo-generator-index-插件"></a> 修改 <code>hexo-generator-index</code> 插件</h2><p>替换文件：<code>node_modules/hexo-generator-index/lib/generator.js</code>为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;;</div><div class="line">var pagination = require(&apos;hexo-pagination&apos;);</div><div class="line">module.exports = function(locals)&#123;</div><div class="line">  var config = this.config;</div><div class="line">  var posts = locals.posts;</div><div class="line">    posts.data = posts.data.sort(function(a, b) &#123;</div><div class="line">        if(a.top &amp;&amp; b.top) &#123; // 两篇文章top都有定义</div><div class="line">            if(a.top == b.top) return b.date - a.date; // 若top值一样则按照文章日期降序排</div><div class="line">            else return b.top - a.top; // 否则按照top值降序排</div><div class="line">        &#125;</div><div class="line">        else if(a.top &amp;&amp; !b.top) &#123; // 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）</div><div class="line">            return -1;</div><div class="line">        &#125;</div><div class="line">        else if(!a.top &amp;&amp; b.top) &#123;</div><div class="line">            return 1;</div><div class="line">        &#125;</div><div class="line">        else return b.date - a.date; // 都没定义按照文章日期降序排</div><div class="line">    &#125;);</div><div class="line">  var paginationDir = config.pagination_dir || &apos;page&apos;;</div><div class="line">  return pagination(&apos;&apos;, posts, &#123;</div><div class="line">    perPage: config.index_generator.per_page,</div><div class="line">    layout: [&apos;index&apos;, &apos;archive&apos;],</div><div class="line">    format: paginationDir + &apos;/%d/&apos;,</div><div class="line">    data: &#123;</div><div class="line">      __index: true</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h2 id="设置文章置顶"><a class="markdownIt-Anchor" href="#设置文章置顶"></a> 设置文章置顶</h2><p>在文章 <code>Front-matter</code> 中添加 <code>top</code> 值，数值越大文章越靠前，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: Hexo</div><div class="line">date: </div><div class="line">tags: </div><div class="line">categories: </div><div class="line">top: 10</div><div class="line">---</div></pre></td></tr></table></figure><h1 id="next主题自定义无序列表样式"><a class="markdownIt-Anchor" href="#next主题自定义无序列表样式"></a> NexT主题自定义无序列表样式</h1><p>打开自定义CSS： <code>\themes\next\source\css\_custom\custom.styl</code> 加入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ul &#123;</div><div class="line">list-style-type: circle;  // 空心圆，实心圆为 disc</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><a href="http://jimmy9876.top">原文链接</a></p><p>部分内容来自以下博客：<br><a href="http://www.wuxubj.cn/" target="_blank" rel="external">务虚笔记</a><br><a href="http://ehlxr.me/" target="_blank" rel="external">小桥流水人家</a><br><a href="http://www.iamlj.com/" target="_blank" rel="external">Jing’s Blog</a><br><a href="https://notes.wanghao.work/" target="_blank" rel="external">Doublemine</a><br><a href="http://lovenight.github.io/" target="_blank" rel="external">岁月如歌</a><br><a href="http://hunao.info/" target="_blank" rel="external">胡闹的日子</a><br><a href="https://neveryu.github.io/" target="_blank" rel="external">Never_yu’s Blog</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Oct 16 2017 16:21:04 GMT+0800 (CST) --&gt;&lt;blockquote&gt;&lt;p&gt;折腾了next这么久，就写一篇博客来记录一下，以作备忘，同时也给后来人一些借鉴&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="http://jimmy9876.top/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>用vue.js开发一个TodoList(3)</title>
    <link href="http://jimmy9876.top/2017/05/29/%E7%94%A8vue-js%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AATodoList-3/"/>
    <id>http://jimmy9876.top/2017/05/29/用vue-js开发一个TodoList-3/</id>
    <published>2017-05-29T12:55:16.000Z</published>
    <updated>2017-10-16T07:16:33.213Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Oct 16 2017 16:21:04 GMT+0800 (CST) --><blockquote><p>前两次开发的没有加入存储功能，一刷新页面，todolist也会随之消失</p></blockquote><p>为了让todolist刷新页面仍然存在于页面中，这里用到localstorage。</p><p>下面是代码:</p><p>文件<code>Hello.vue</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;div id=&quot;app&quot;&gt;</div><div class="line">    &lt;h1 v-html=&quot;title&quot;&gt;&lt;/h1&gt;</div><div class="line">    &lt;input v-model=&quot;newItem&quot; v-on:keyup.enter=&quot;addNew&quot;&gt;&lt;/input&gt;</div><div class="line">    &lt;ul&gt;</div><div class="line">      &lt;li v-for=&quot;item in items&quot; v-bind:class=&quot;&#123;finished:item.isFinished&#125;&quot; v-on:click=&quot;toggleFinish(item)&quot;&gt;&#123;&#123;item.label&#125;&#125;&lt;/li&gt;</div><div class="line">    &lt;/ul&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/template&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">import Store from &apos;./store&apos;</div><div class="line">export default &#123;</div><div class="line">  data: function () &#123;</div><div class="line">    return &#123;</div><div class="line">      title: &apos;This Is A Todolist&apos;,</div><div class="line">      items: Store.fetch(),</div><div class="line">      newItem: &apos;&apos;</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  watch: &#123;</div><div class="line">    items: &#123;</div><div class="line">      handler: function (items) &#123;</div><div class="line">        Store.save(items)</div><div class="line">      &#125;,</div><div class="line">      deep: true</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  methods: &#123;</div><div class="line">    toggleFinish: function (item) &#123;</div><div class="line">      item.isFinished = !item.isFinished</div><div class="line">    &#125;,</div><div class="line">    addNew: function () &#123;</div><div class="line">      this.items.push(&#123;</div><div class="line">        label: this.newItem,</div><div class="line">        isFinished: false</div><div class="line">      &#125;)</div><div class="line">      this.newItem = &apos;&apos;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div><div class="line"></div><div class="line">&lt;style&gt;</div><div class="line">.finished &#123;</div><div class="line">  text-decoration: underline;</div><div class="line">&#125;</div><div class="line"></div><div class="line">li &#123;</div><div class="line">  list-style: none;</div><div class="line">  font-size: 1.6em;</div><div class="line">  margin-top: 10px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">#app &#123;</div><div class="line">  font-family: &apos;Avenir&apos;, Helvetica, Arial, sans-serif;</div><div class="line">  -webkit-font-smoothing: antialiased;</div><div class="line">  -moz-osx-font-smoothing: grayscale;</div><div class="line">  text-align: center;</div><div class="line">  color: #2c3e50;</div><div class="line">  margin-top: 60px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">input &#123;</div><div class="line">  width: 230px;</div><div class="line">  height: 40px;</div><div class="line">  border-radius: 20px;</div><div class="line">  padding: 0.4em 0.35em;</div><div class="line">  border: 3px solid #CFCFCF;</div><div class="line">  font-size: 1.55em;</div><div class="line">&#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure><p>文件<code>store.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> STORAGE_KEY = <span class="string">'todos-vuejs'</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  fetch: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(<span class="built_in">window</span>.localStorage.getItem(STORAGE_KEY) || <span class="string">'[]'</span>)</div><div class="line">  &#125;,</div><div class="line">  save: <span class="function"><span class="keyword">function</span> (<span class="params">items</span>) </span>&#123;</div><div class="line">    <span class="built_in">window</span>.localStorage.setItem(STORAGE_KEY, <span class="built_in">JSON</span>.stringify(items))</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>两个方法：一个设置，一个获取，将两个方法加入到<code>Hello.vue</code>中去,代码已放到<a href="https://github.com/Jimmy9876/TodoList" target="_blank" rel="external">github</a>欢迎持续关注，如有问题欢迎留言交流</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Oct 16 2017 16:21:04 GMT+0800 (CST) --&gt;&lt;blockquote&gt;&lt;p&gt;前两次开发的没有加入存储功能，一刷新页面，todolist也会随之消失&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;为了让todolist
      
    
    </summary>
    
    
      <category term="vue.js" scheme="http://jimmy9876.top/tags/vue-js/"/>
    
  </entry>
  
  <entry>
    <title>用vue.js开发一个TodoList(2)</title>
    <link href="http://jimmy9876.top/2017/05/29/%E7%94%A8vue-js%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AATodoList-2/"/>
    <id>http://jimmy9876.top/2017/05/29/用vue-js开发一个TodoList-2/</id>
    <published>2017-05-29T04:43:54.000Z</published>
    <updated>2017-10-16T07:16:33.213Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Oct 16 2017 16:21:04 GMT+0800 (CST) --><p>上次搭建完了环境，这次开始学习如何写一个TodoList。</p><p>首先打开文件</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fg24w7vy6cj305704o0sw.jpg" alt=""></p><p><code>Hello.vue</code></p><p>打开之后，删除<code>&lt;template&gt;</code> ,<code>&lt;script&gt;</code> 内的与<code>HelloWorld</code>相关的代码。</p><p>之后，在文件中写入代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;div class=&quot;hello&quot;&gt;</div><div class="line">    &lt;h1 v-text=&quot;title&quot;&gt;&lt;/h1&gt;</div><div class="line">      &lt;ul&gt;</div><div class="line">        &lt;li v-for=&quot;item in items&quot; v-bind:class=&quot;&#123;finished: item.isFinished&#125;&quot; v-on:click=&quot;toggleFinish(item)&quot;&gt;</div><div class="line">          &#123;&#123; item.label &#125;&#125;</div><div class="line">        &lt;/li&gt;</div><div class="line">      &lt;/ul&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/template&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">export default &#123;</div><div class="line">  data () &#123;</div><div class="line">    return &#123;</div><div class="line">      title: &apos;This is a todolist.&apos;,</div><div class="line">      items: [</div><div class="line">        &#123;</div><div class="line">          label: &apos;coding&apos;,</div><div class="line">          isFinished: false</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          label: &apos;walking&apos;,</div><div class="line">          isFinished: true</div><div class="line">        &#125;</div><div class="line">      ],</div><div class="line">      liClass: &apos;ThisisliClass&apos;</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  methods: &#123;</div><div class="line">    toggleFinish: function (item) &#123;</div><div class="line">      item.isFinished = !item.isFinished</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div><div class="line"></div><div class="line">&lt;!-- Add &quot;scoped&quot; attribute to limit CSS to this component only --&gt;</div><div class="line">&lt;style scoped&gt;</div><div class="line">.finished&#123;</div><div class="line">  text-decoration: underline;</div><div class="line">&#125;</div><div class="line">h1, h2 &#123;</div><div class="line">  font-weight: normal;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ul &#123;</div><div class="line">  list-style-type: none;</div><div class="line">  padding: 0;</div><div class="line">&#125;</div><div class="line"></div><div class="line">li &#123;</div><div class="line">  display: inline-block;</div><div class="line">  margin: 0 10px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">a &#123;</div><div class="line">  color: #42b983;</div><div class="line">&#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure><p>其中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;li v-for=&quot;item in items&quot; v-bind:class=&quot;&#123;finished: item.isFinished&#125;&quot; v-on:click=&quot;toggleFinish(item)&quot;&gt;</div><div class="line">         &#123;&#123; item.label &#125;&#125;</div><div class="line">       &lt;/li&gt;</div></pre></td></tr></table></figure><p><code>vue-for</code>用来渲染items里面的内容，items是一个数组，用来存放待完成的任务以及是否完成，里面的<code>vue-on</code>是绑定事件，绑定了一个click事件，点击即触发，触发的方法是method里面的function，这个function实现了点击去除下划线的功能。</p><p>接下来使用v-model实现一个双向绑定，构建一个input输入框，实现输入按回车就能将数据存放到数组里展示到页面上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"> &lt;input v-model=&quot;newItem&quot; @keyup.enter=&quot;addNew&quot;&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">export default &#123;</div><div class="line">  data () &#123;</div><div class="line">    return &#123;</div><div class="line">      title: &apos;This is a todolist.&apos;,</div><div class="line">      items: [</div><div class="line">      ],</div><div class="line">      newItem: &apos;&apos;</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  methods: &#123;</div><div class="line">    toggleFinish: function (item) &#123;</div><div class="line">      item.isFinished = !item.isFinished</div><div class="line">    &#125;,</div><div class="line">    addNew: function () &#123;</div><div class="line">      this.items.push(&#123;</div><div class="line">        label: this.newItem,</div><div class="line">        isFinished: false</div><div class="line">      &#125;)</div><div class="line">      this.newItem = &apos;&apos;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure><p>具体项目源码已上传至<a href="https://github.com/Jimmy9876/TodoList" target="_blank" rel="external">github</a></p><p>至此实现了一个简单的todolist。</p><p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fg25pjbu7nj30at0emaab.jpg" alt=""></p><h1><a class="markdownIt-Anchor" href="#"></a></h1><h1 id="未完待续"><a class="markdownIt-Anchor" href="#未完待续"></a> 未完待续…</h1><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Oct 16 2017 16:21:04 GMT+0800 (CST) --&gt;&lt;p&gt;上次搭建完了环境，这次开始学习如何写一个TodoList。&lt;/p&gt;&lt;p&gt;首先打开文件&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg
      
    
    </summary>
    
    
      <category term="vue.js" scheme="http://jimmy9876.top/tags/vue-js/"/>
    
  </entry>
  
  <entry>
    <title>git养成记之二</title>
    <link href="http://jimmy9876.top/2017/05/27/git%E5%85%BB%E6%88%90%E8%AE%B0%E4%B9%8B%E4%BA%8C/"/>
    <id>http://jimmy9876.top/2017/05/27/git养成记之二/</id>
    <published>2017-05-27T05:03:09.000Z</published>
    <updated>2017-10-16T07:16:33.211Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Oct 16 2017 16:21:04 GMT+0800 (CST) --><blockquote><p>前几天发现，<code>-f</code>是<code>force</code>强推，即利用强覆盖方式用你本地的代码替代git仓库内的内容，所以说<code>git push -f</code>是一个比较可怕的命令，和<code>rm -rf</code>一样可怕😨</p></blockquote><h3 id="但是如果你不强推可能就出现了这样的错误"><a class="markdownIt-Anchor" href="#但是如果你不强推可能就出现了这样的错误"></a> 但是如果你不强推，可能就出现了这样的错误</h3><p><code>error:failed to push some refs to …</code></p><p>当要push代码到git时，出现提示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">error:failed to push some refs to ...</div><div class="line"></div><div class="line">Dealing with “non-fast-forward” errors</div><div class="line"></div><div class="line">From time to time you may encounter this error while pushing:</div><div class="line"></div><div class="line"><span class="meta">$</span><span class="bash"> git push origin master </span></div><div class="line"></div><div class="line">To ../remote/ </div><div class="line"></div><div class="line"> ! [rejected]        master -&gt; master (non-fast forward) </div><div class="line"></div><div class="line">error: failed to push some refs to '../remote/' </div><div class="line"></div><div class="line">To prevent you from losing history, non-fast-forward updates were rejected</div><div class="line"></div><div class="line">Merge the remote changes before pushing again.  See the 'non-fast forward'</div><div class="line"></div><div class="line">section of 'git push --help' for details.</div></pre></td></tr></table></figure><p>问题（Non-fast-forward）的出现原因在于：git仓库中已经有一部分代码，所以它不允许你直接把你的代码覆盖上去。</p><p>强推是解决办法之一，不过强推会覆盖之前的东西。。。至于覆盖了能不能找回，我还没有具体研究。</p><p>另外还有一个办法，先把git的东西fetch到你本地然后merge后再push。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git fetch</div><div class="line">git merge</div></pre></td></tr></table></figure><p>这2句命令等价于</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git pull</div></pre></td></tr></table></figure><p>可是，这时候又出现了如下的问题：</p><p>上面出现的 [branch “master”]是需要明确(.git/config)如下的内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">[branch "master"]</div><div class="line"></div><div class="line">    remote = origin</div><div class="line"></div><div class="line">    merge = refs/heads/master</div></pre></td></tr></table></figure><p>这等于告诉git2件事:</p><p>1，当你处于<code>master branch</code>, 默认的<code>remote</code>就是<code>origin</code>。</p><p>2，当你在<code>master branch</code>上使用<code>git pull</code>时，没有指定<code>remote</code>和<code>branch</code>，那么<code>git</code>就会采用默认的<code>remote</code>（也就是<code>origin</code>）来<code>merge</code>在<code>master branch</code>上所有的改变</p><p>如果不想或者不会编辑<code>config</code>文件的话，可以输入如下命令行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> git config branch.master.remote origin </span></div><div class="line"></div><div class="line"><span class="meta">$</span><span class="bash"> git config branch.master.merge refs/heads/master</span></div></pre></td></tr></table></figure><p>之后再重新<code>git pull</code>下。最后<code>git push</code>你的代码吧。</p><p>总结：你的本地代码和远程仓库有冲突的时候，就会提示以上错误，说白了你就是要解决这些冲突，这样才能<code>push</code>到远程仓库当中去。如有疑问，欢迎留言交流。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Oct 16 2017 16:21:04 GMT+0800 (CST) --&gt;&lt;blockquote&gt;&lt;p&gt;前几天发现，&lt;code&gt;-f&lt;/code&gt;是&lt;code&gt;force&lt;/code&gt;强推，即利用强覆盖方式用你本地的代码替代git仓库内
      
    
    </summary>
    
    
      <category term="git" scheme="http://jimmy9876.top/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>用vue.js开发一个TodoList(1)</title>
    <link href="http://jimmy9876.top/2017/05/27/%E7%94%A8vue-js%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AATodoList-1/"/>
    <id>http://jimmy9876.top/2017/05/27/用vue-js开发一个TodoList-1/</id>
    <published>2017-05-27T04:26:09.000Z</published>
    <updated>2017-10-16T07:16:33.213Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Oct 16 2017 16:21:04 GMT+0800 (CST) --><blockquote><p>这几天，开始静下心来学习下vue.js，准备用vue.js开发一个TodoList，在学习的过程中把学习进度实时记录下来</p></blockquote><h2 id="介绍"><a class="markdownIt-Anchor" href="#介绍"></a> 介绍</h2><p>Vue.js（读音 /vjuː/，类似于 <strong>view</strong>） 是一套构建用户界面的<strong>渐进式框架</strong>。与其他重量级框架不同的是，Vue 采用自底向上增量开发的设计。Vue 的核心库只关注视图层，它不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与<a href="https://cn.vuejs.org/v2/guide/single-file-components.html" target="_blank" rel="external">单文件组件</a>和 <a href="https://github.com/vuejs/awesome-vue#libraries--plugins" target="_blank" rel="external">Vue 生态系统支持的库</a>结合使用时，Vue 也完全能够为复杂的单页应用程序提供驱动。</p><h2 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h2><h3 id="兼容性"><a class="markdownIt-Anchor" href="#兼容性"></a> 兼容性</h3><p>Vue.js 不支持 IE8 及其以下版本，因为 Vue.js 使用了 IE8 不能模拟的 ECMAScript 5 特性。 Vue.js 支持所有<a href="http://caniuse.com/#feat=es5" target="_blank" rel="external">兼容 ECMAScript 5 的浏览器</a>。</p><p>Vue.js 提供一个<a href="https://github.com/vuejs/vue-cli" target="_blank" rel="external">官方命令行工具</a>，可用于快速搭建大型单页应用。该工具提供开箱即用的构建工具配置，带来现代化的前端开发流程。只需几分钟即可创建并启动一个带热重载、保存时静态检查以及可用于生产环境的构建配置的项目，运行如下命令安装:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> 全局安装 vue-cli</span></div><div class="line"><span class="meta">$</span><span class="bash"> npm install --global vue-cli</span></div><div class="line"><span class="meta">#</span><span class="bash"> 创建一个基于 webpack 模板的新项目</span></div><div class="line"><span class="meta">$</span><span class="bash"> vue init webpack 你的项目名</span></div><div class="line"><span class="meta">#</span><span class="bash"> 安装依赖，走你</span></div><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> 你的项目名</span></div><div class="line"><span class="meta">$</span><span class="bash"> npm install</span></div></pre></td></tr></table></figure><p>在这里，如果显示<code>npm</code>命令<code>command not found</code>请安装一下<a href="https://nodejs.org/en/download/" target="_blank" rel="external">node.js</a></p><p>如果觉得运行<code>npm install</code>慢，请打开终端运行如下界面，让<code>npm</code>走淘宝镜像。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> npm install -g cnpm --registry=https://registry.npm.taobao.org</span></div></pre></td></tr></table></figure><p>之后凡遇到<code>npm</code>命令的时候换成<code>cnpm</code>代替，就会快很多。</p><p>👉<a href="http://npm.taobao.org" target="_blank" rel="external">✨镜像网址✨</a>👈</p><p>安装成功运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm run dev</div></pre></td></tr></table></figure><p>浏览器出现如下页面</p><p><img src="http://i4.buimg.com/1949/88ed3c8b8f0ccffd.png" alt="Markdown"></p><p>至此就安装成功了，接下来可以一步一步开发一个TodoList项目了。项目实时更新于<a href="https://github.com/Jimmy9876/TodoList" target="_blank" rel="external">我的GitHub</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Oct 16 2017 16:21:04 GMT+0800 (CST) --&gt;&lt;blockquote&gt;&lt;p&gt;这几天，开始静下心来学习下vue.js，准备用vue.js开发一个TodoList，在学习的过程中把学习进度实时记录下来&lt;/p&gt;&lt;/
      
    
    </summary>
    
    
      <category term="vue.js" scheme="http://jimmy9876.top/tags/vue-js/"/>
    
  </entry>
  
  <entry>
    <title>php模拟登陆实现课表抓取(最新版)</title>
    <link href="http://jimmy9876.top/2017/05/26/php%E6%A8%A1%E6%8B%9F%E7%99%BB%E9%99%86%E5%AE%9E%E7%8E%B0%E8%AF%BE%E8%A1%A8%E6%8A%93%E5%8F%96-%E6%9C%80%E6%96%B0%E7%89%88/"/>
    <id>http://jimmy9876.top/2017/05/26/php模拟登陆实现课表抓取-最新版/</id>
    <published>2017-05-26T07:13:01.000Z</published>
    <updated>2017-10-16T07:16:33.212Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Oct 16 2017 16:21:04 GMT+0800 (CST) --><blockquote><p>首先，简单的说下表单原理，当我们在正方输入学号、密码、验证码的时候，点击提交按钮会产生一个POST请求，服务器在接受到POST请求以后，检查提交的学号密码验证码是否正确，正确则登陆成功。</p></blockquote><p>环境：Mac+MAMP Pro+phpstorm(PHP7.1)+Chrome</p><h2 id="1-抓包"><a class="markdownIt-Anchor" href="#1-抓包"></a> 1、抓包</h2><p>打开谷歌浏览器访问学校教务处网址，打开开发者工具选择network，之后在正方里填上你的学号，密码，验证码，登录，看看这期间提交的数据。</p><p><img src="http://i1.piimg.com/588926/fa6f6f661397058c.jpg" alt=""></p><p>我们要用到的数据只有default2.aspx和xs_main.aspx?xh=”你的学号”这两个，其余的都是修饰用的css文件。点开default2.aspx可以看到你提交的表单数据。</p><p><img src="http://i1.piimg.com/588926/e2468014006c83be.jpg" alt=""></p><p>其中__VIEWSTATE是asp.net服务器的状态信息，需要抓取出来。<br>另外default2.aspx这个页面采用了302跳转，即登录成功后会跳转到xs_main.aspx?xh=”你的学号”这个网址，这一点可能是大多数人模拟登录失败的原因。</p><h2 id="2-构造登录页面"><a class="markdownIt-Anchor" href="#2-构造登录页面"></a> 2、构造登录页面</h2><p>三项信息必填，学号、密码、验证码。先说说验证码怎么保存到本地。</p><p><img src="http://i4.buimg.com/588926/7d45a6e1eff2d946.jpg" alt=""></p><p>验证码是由一个叫checkcode.aspx的网页生成的，要保存可以用<code>fwrite</code>来实现。直接用<code>&lt;img src=&quot;&quot;</code>填上刚才的网址理论上也可以，只要你能保存下这张图片所对应的cookie，这个cookie决定了你是否能够进行后续数据抓取。</p><p>具体代码如下：</p><p>首先要新建一个cookie文件夹，并且把session打开（可以解决高并发访问时登陆失败的问题）。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span> </div><div class="line">    session_start();</div><div class="line">    $id=session_id();</div><div class="line">    $_SESSION[<span class="string">'id'</span>]=$id;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>验证码保存：</p><p>这里注意⚠️要自己新建一个<code>cookie</code>文件夹📁在你的项目目录。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span> </div><div class="line">  $cookie = dirname(<span class="keyword">__FILE__</span>) . <span class="string">'/cookie/'</span>.$_SESSION[<span class="string">'id'</span>].<span class="string">'.txt'</span>; <span class="comment">//cookie路径</span></div><div class="line">$verify_code_url = <span class="string">"http://你的正方网址/CheckCode.aspx"</span>; <span class="comment">//验证码地址</span></div><div class="line">$curl = curl_init();</div><div class="line">curl_setopt($curl, CURLOPT_URL, $verify_code_url);</div><div class="line">curl_setopt($curl, CURLOPT_COOKIEJAR, $cookie);  <span class="comment">//保存cookie</span></div><div class="line">curl_setopt($curl, CURLOPT_HEADER, <span class="number">0</span>);</div><div class="line">curl_setopt($curl, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</div><div class="line">$img = curl_exec($curl);  <span class="comment">//执行curl</span></div><div class="line">curl_close($curl);</div><div class="line">$fp = fopen(<span class="string">"verifyCode.jpg"</span>,<span class="string">"w"</span>);  <span class="comment">//文件名</span></div><div class="line">fwrite($fp,$img);  <span class="comment">//写入文件</span></div><div class="line">fclose($fp);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>之后构造<code>input</code>表单，设置好<code>name</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">"form1"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">"kebiao.php"</span> &gt;</span></div><div class="line">    用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"xh"</span> /&gt;</span><span class="comment">&lt;!--普通文本框--&gt;</span></div><div class="line">    密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"pw"</span> /&gt;</span><span class="comment">&lt;!--密码框--&gt;</span></div><div class="line">    验证码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"code"</span> /&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"verifyCode.jpg"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交信息"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure><h2 id="3-后端模拟登录页面"><a class="markdownIt-Anchor" href="#3-后端模拟登录页面"></a> 3、后端模拟登录页面</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Created by PhpStorm.</span></div><div class="line"><span class="comment"> * User: Apple</span></div><div class="line"><span class="comment"> * Date: 2019/5/17</span></div><div class="line"><span class="comment"> * Time: PM9:08</span></div><div class="line"><span class="comment"> */</span></div><div class="line">session_start();</div><div class="line">header(<span class="string">"Content-type: text/html; charset=gb2312"</span>);  <span class="comment">//视学校而定，博主学校是gbk编码，php也采用的gbk编码方式</span></div><div class="line"></div><div class="line"><span class="comment">//将表格转换成数组函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_td_array</span><span class="params">($table)</span> </span>&#123;</div><div class="line">    $table = preg_replace(<span class="string">"'&lt;table[^&gt;]*?&gt;'si"</span>,<span class="string">""</span>,$table);</div><div class="line">    $table = preg_replace(<span class="string">"'&lt;tr[^&gt;]*?&gt;'si"</span>,<span class="string">""</span>,$table);</div><div class="line">    $table = preg_replace(<span class="string">"'&lt;td[^&gt;]*?&gt;'si"</span>,<span class="string">""</span>,$table);</div><div class="line">    $table = str_replace(<span class="string">"&lt;/tr&gt;"</span>,<span class="string">"&#123;tr&#125;"</span>,$table);</div><div class="line">    $table = str_replace(<span class="string">"&lt;/td&gt;"</span>,<span class="string">"&#123;td&#125;"</span>,$table);</div><div class="line">    <span class="comment">//去掉 HTML 标记</span></div><div class="line">    $table = preg_replace(<span class="string">"'&lt;[/!]*?[^&lt;&gt;]*?&gt;'si"</span>,<span class="string">""</span>,$table);</div><div class="line">    <span class="comment">//去掉空白字符</span></div><div class="line">    $table = preg_replace(<span class="string">"'([rn])[s]+'"</span>,<span class="string">""</span>,$table);</div><div class="line">    $table = preg_replace(<span class="string">'/&amp;nbsp;/'</span>,<span class="string">""</span>,$table);</div><div class="line">    $table = str_replace(<span class="string">" "</span>,<span class="string">""</span>,$table);</div><div class="line">    $table = str_replace(<span class="string">" "</span>,<span class="string">""</span>,$table);</div><div class="line">    $table = explode(<span class="string">'&#123;tr&#125;'</span>, $table);</div><div class="line">    array_pop($table);</div><div class="line">    <span class="keyword">foreach</span> ($table <span class="keyword">as</span> $key=&gt;$tr) &#123;</div><div class="line">        $td = explode(<span class="string">'&#123;td&#125;'</span>, $tr);</div><div class="line">        array_pop($td);</div><div class="line">        $td_array[] = $td;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> $td_array;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">login_post</span><span class="params">($url, $cookie, $post)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    $ch = curl_init();</div><div class="line">    curl_setopt($ch, CURLOPT_URL, $url);</div><div class="line">    curl_setopt($ch, CURLOPT_HEADER, <span class="number">0</span>);</div><div class="line">    curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);  <span class="comment">//不自动输出数据，要echo才行</span></div><div class="line">    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, <span class="number">1</span>);  <span class="comment">//重要，抓取跳转后数据</span></div><div class="line">    curl_setopt($ch, CURLOPT_COOKIEFILE, $cookie);</div><div class="line">    curl_setopt($ch, CURLOPT_REFERER, <span class="string">'http://202.119.225.34/'</span>);  <span class="comment">//重要，302跳转需要referer，可以在Request Headers找到</span></div><div class="line">    curl_setopt($ch, CURLOPT_POSTFIELDS, $post);  <span class="comment">//post提交数据</span></div><div class="line">    $result = curl_exec($ch);</div><div class="line"><span class="comment">//    $content = curl_getinfo($ch);</span></div><div class="line"><span class="comment">//    echo json_encode($content);</span></div><div class="line">    curl_close($ch);</div><div class="line">    <span class="keyword">return</span> $result;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$_SESSION[<span class="string">'xh'</span>] = $_POST[<span class="string">'xh'</span>];</div><div class="line">$xh = $_POST[<span class="string">'xh'</span>];</div><div class="line">$pw = $_POST[<span class="string">'pw'</span>];</div><div class="line">$code = $_POST[<span class="string">'code'</span>];</div><div class="line">$cookie = dirname(<span class="keyword">__FILE__</span>) . <span class="string">'/cookie/'</span> . $_SESSION[<span class="string">'id'</span>] . <span class="string">'.txt'</span>;</div><div class="line">$url = <span class="string">"http://202.119.225.34/default2.aspx"</span>;</div><div class="line">$con1=login_post($url,$cookie,<span class="string">''</span>);</div><div class="line">    preg_match_all(<span class="string">'/&lt;input type="hidden" name="__VIEWSTATE" value="([^&lt;&gt;]+)" \/&gt;/'</span>, $con1, $view); <span class="comment">//获取__VIEWSTATE字段并存到$view数组中</span></div><div class="line">    $post=<span class="keyword">array</span>(</div><div class="line">        <span class="string">'__VIEWSTATE'</span>=&gt;$view[<span class="number">1</span>][<span class="number">0</span>],</div><div class="line">        <span class="string">'txtUserName'</span>=&gt;$xh,</div><div class="line">        <span class="string">'TextBox2'</span>=&gt;$pw,</div><div class="line">        <span class="string">'txtSecretCode'</span>=&gt;$code,</div><div class="line">        <span class="string">'RadioButtonList1'</span>=&gt;<span class="string">'%D1%A7%C9%FA'</span>,  <span class="comment">//“学生”的gbk编码</span></div><div class="line">        <span class="string">'Button1'</span>=&gt;<span class="string">''</span>,</div><div class="line">        <span class="string">'lbLanguage'</span>=&gt;<span class="string">''</span>,</div><div class="line">        <span class="string">'hidPdrs'</span>=&gt;<span class="string">''</span>,</div><div class="line">        <span class="string">'hidsc'</span>=&gt;<span class="string">''</span></div><div class="line">    );</div><div class="line">    $con2=login_post($url,$cookie,http_build_query($post)); <span class="comment">//将数组连接成字符串</span></div><div class="line">    preg_match_all(<span class="string">'/&lt;span id="xhxm"&gt;([^&lt;&gt;]+)/'</span>, $con2, $xm);</div><div class="line">$xm[<span class="number">1</span>][<span class="number">0</span>] = substr($xm[<span class="number">1</span>][<span class="number">0</span>], <span class="number">0</span>, <span class="number">-4</span>);</div><div class="line">$url2 = <span class="string">"http://202.119.225.34/xskbcx.aspx?xh="</span> . $_SESSION[<span class="string">'xh'</span>] . <span class="string">"&amp;xm="</span> . $xm[<span class="number">1</span>][<span class="number">0</span>];</div><div class="line">$con3 = login_post($url2, $cookie, <span class="string">''</span>);</div><div class="line"></div><div class="line"><span class="comment">//echo $con3;</span></div><div class="line">print_r($con3);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>如果代码都正确，你将看到如下页面</p><p><img src="http://i4.buimg.com/588926/eda145ce10fe2f0a.png" alt=""></p><p><img src="http://i4.buimg.com/588926/fad605f358e06ff5.png" alt=""></p><p>课表成功拿到。</p><p>同理可以用正则表达式拿到成绩等，可以用这些数据做个微信公众号用来查询成绩课表等等。这些以后有时间再深入了解。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Oct 16 2017 16:21:04 GMT+0800 (CST) --&gt;&lt;blockquote&gt;&lt;p&gt;首先，简单的说下表单原理，当我们在正方输入学号、密码、验证码的时候，点击提交按钮会产生一个POST请求，服务器在接受到POST请求以
      
    
    </summary>
    
    
      <category term="php" scheme="http://jimmy9876.top/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>正方自动测评javascript脚本</title>
    <link href="http://jimmy9876.top/2017/05/26/hello-world/"/>
    <id>http://jimmy9876.top/2017/05/26/hello-world/</id>
    <published>2017-05-26T07:13:01.000Z</published>
    <updated>2017-10-16T07:16:33.211Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Oct 16 2017 16:21:04 GMT+0800 (CST) --><blockquote><p>又是一年期末季，除了麻烦的期末考试还有没用的教学评价。教学评价太麻烦，就搞了个脚本来节省工作。</p></blockquote><p>这是直接打最高分给老师的，除了一个较好，其他都是好。如果你需要给差评，点完脚本后自己改一下。</p><p>脚本是是用js写的，拖动下边的链接到书签栏就行了，或者直接添加书签。点击一次可以给一个老师完成评价，所有评价结束以后自己提交。</p><p>拖动我：<a href="javascript:(function(){var obj=$('iframeautoheight').contentDocument.getElementsByTagName('select'); for(i=1;i<obj.length;i++){obj[i].value='完全认同'; } var rid=Math.max(1, Math.floor(Math.random()*obj.length)); obj[rid].value='相对认同'; $('iframeautoheight').contentDocument.getElementById('Button1').click();})()" class="button button-small button-orange" onclick="return alert("把我拖动到书签栏评测的时候点我就可以了"),!1" target="_blank" rel="external">教学评价助手</a><br>拖动我：<a href="javascript:(function(){var obj=$('iframeautoheight').contentDocument.getElementsByTagName('select'); for(i=1;i<obj.length;i++){obj[i].value='好'; } var rid=Math.max(1, Math.floor(Math.random()*obj.length)); obj[rid].value='较好'; $('iframeautoheight').contentDocument.getElementById('Button1').click();})()" class="button button-small button-orange" onclick="return alert("把我拖动到书签栏评测的时候点我就可以了"),!1" target="_blank" rel="external">教师评价助手</a></p><p>截图：<br><img src="http://i1.piimg.com/1949/f33d22ed8a39beb1.png" alt="Markdown"><br><img src="http://i1.piimg.com/1949/6df5a037ba269ac4.png" alt="Markdown"><br>其他学校要用只要修改一下赋值就行。自己查看一下网页元素，然后看一下你们学校的赋值是什么？好? 良好？自己再改一下书签就行了。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Oct 16 2017 16:21:04 GMT+0800 (CST) --&gt;&lt;blockquote&gt;&lt;p&gt;又是一年期末季，除了麻烦的期末考试还有没用的教学评价。教学评价太麻烦，就搞了个脚本来节省工作。&lt;/p&gt;&lt;/blockquote&gt;&lt;p
      
    
    </summary>
    
    
      <category term="javascript" scheme="http://jimmy9876.top/tags/javascript/"/>
    
  </entry>
  
</feed>
